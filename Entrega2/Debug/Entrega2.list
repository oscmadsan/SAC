
Entrega2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006768  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a90  08006a90  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a98  08006a98  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  2000007c  08006b1c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08006b1c  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b35c  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a4  00000000  00000000  0003b451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001156  00000000  00000000  000403b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f15d  00000000  00000000  00041506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0a7  00000000  00000000  00070663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012d051  00000000  00000000  0008a70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000684c  00000000  00000000  001b775c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001bdfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000007c 	.word	0x2000007c
 8000210:	00000000 	.word	0x00000000
 8000214:	08006944 	.word	0x08006944

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000080 	.word	0x20000080
 8000230:	08006944 	.word	0x08006944

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800055c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000560:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d013      	beq.n	8000594 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800056c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000570:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000574:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800057c:	e000      	b.n	8000580 <ITM_SendChar+0x2c>
    {
      __NOP();
 800057e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800058a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 ff09 	bl	800141e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f828 	bl	8000660 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <main+0x4c>)
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fa09 	bl	8000a2c <MX_GPIO_Init>
  MX_ADC1_Init();
 800061a:	f000 f887 	bl	800072c <MX_ADC1_Init>
  MX_ICACHE_Init();
 800061e:	f000 f8fb 	bl	8000818 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000622:	f000 f90d 	bl	8000840 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000626:	f000 f959 	bl	80008dc <MX_RTC_Init>
  MX_UCPD1_Init();
 800062a:	f000 f9a1 	bl	8000970 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800062e:	f000 f9d5 	bl	80009dc <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //en el while llamaremos a un delay para que haga una espera y despues llamaremos a la funion del estado actual
	  HAL_Delay(100);
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f000 ff6a 	bl	800150c <HAL_Delay>
	  estadoFinal = funcionesEstado[estadoActual]();
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <main+0x50>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <main+0x54>)
 8000640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000644:	4798      	blx	r3
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b04      	ldr	r3, [pc, #16]	; (800065c <main+0x58>)
 800064c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 800064e:	e7f0      	b.n	8000632 <main+0x2e>
 8000650:	e000007c 	.word	0xe000007c
 8000654:	200004b0 	.word	0x200004b0
 8000658:	20000004 	.word	0x20000004
 800065c:	20000000 	.word	0x20000000

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b098      	sub	sp, #96	; 0x60
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2248      	movs	r2, #72	; 0x48
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 fb3b 	bl	8005cea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000682:	2000      	movs	r0, #0
 8000684:	f002 fb32 	bl	8002cec <HAL_PWREx_ControlVoltageScaling>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800068e:	f000 fb9b 	bl	8000dc8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000692:	f002 fb0d 	bl	8002cb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SystemClock_Config+0xc8>)
 8000698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <SystemClock_Config+0xc8>)
 800069e:	f023 0318 	bic.w	r3, r3, #24
 80006a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006a6:	2336      	movs	r3, #54	; 0x36
 80006a8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006aa:	2381      	movs	r3, #129	; 0x81
 80006ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c4:	2360      	movs	r3, #96	; 0x60
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006d4:	2337      	movs	r3, #55	; 0x37
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d8:	2307      	movs	r3, #7
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0318 	add.w	r3, r7, #24
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fb8f 	bl	8002e0c <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f4:	f000 fb68 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2105      	movs	r1, #5
 8000710:	4618      	mov	r0, r3
 8000712:	f003 f851 	bl	80037b8 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800071c:	f000 fb54 	bl	8000dc8 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3760      	adds	r7, #96	; 0x60
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_ADC1_Init+0xe0>)
 8000750:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <MX_ADC1_Init+0xe4>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_ADC1_Init+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_ADC1_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC1_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_ADC1_Init+0xe0>)
 800076e:	2204      	movs	r2, #4
 8000770:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0xe0>)
 8000774:	2200      	movs	r2, #0
 8000776:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC1_Init+0xe0>)
 8000780:	2201      	movs	r2, #1
 8000782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0xe0>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_ADC1_Init+0xe0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <MX_ADC1_Init+0xe0>)
 80007b0:	f001 f870 	bl	8001894 <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ba:	f000 fb05 	bl	8000dc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4810      	ldr	r0, [pc, #64]	; (800080c <MX_ADC1_Init+0xe0>)
 80007ca:	f001 fdbf 	bl	800234c <HAL_ADCEx_MultiModeConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d4:	f000 faf8 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ADC1_Init+0xe8>)
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007dc:	2306      	movs	r3, #6
 80007de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e4:	237f      	movs	r3, #127	; 0x7f
 80007e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e8:	2304      	movs	r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_ADC1_Init+0xe0>)
 80007f6:	f001 f999 	bl	8001b2c <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000800:	f000 fae2 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000098 	.word	0x20000098
 8000810:	42028000 	.word	0x42028000
 8000814:	0c900008 	.word	0x0c900008

08000818 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800081c:	2000      	movs	r0, #0
 800081e:	f002 f913 	bl	8002a48 <HAL_ICACHE_ConfigAssociativityMode>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000828:	f000 face 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800082c:	f002 f92c 	bl	8002a88 <HAL_ICACHE_Enable>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000836:	f000 fac7 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000846:	4a23      	ldr	r2, [pc, #140]	; (80008d4 <MX_LPUART1_UART_Init+0x94>)
 8000848:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 800084c:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MX_LPUART1_UART_Init+0x98>)
 800084e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000864:	220c      	movs	r2, #12
 8000866:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 8000888:	f004 f8ca 	bl	8004a20 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000892:	f000 fa99 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 800089a:	f004 fe63 	bl	8005564 <HAL_UARTEx_SetTxFifoThreshold>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008a4:	f000 fa90 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 80008ac:	f004 fe98 	bl	80055e0 <HAL_UARTEx_SetRxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008b6:	f000 fa87 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_LPUART1_UART_Init+0x90>)
 80008bc:	f004 fe19 	bl	80054f2 <HAL_UARTEx_DisableFifoMode>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008c6:	f000 fa7f 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000100 	.word	0x20000100
 80008d4:	40008000 	.word	0x40008000
 80008d8:	00033324 	.word	0x00033324

080008dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_RTC_Init+0x8c>)
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <MX_RTC_Init+0x90>)
 80008f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_RTC_Init+0x8c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_RTC_Init+0x8c>)
 8000900:	227f      	movs	r2, #127	; 0x7f
 8000902:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_RTC_Init+0x8c>)
 8000906:	22ff      	movs	r2, #255	; 0xff
 8000908:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_RTC_Init+0x8c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_RTC_Init+0x8c>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_RTC_Init+0x8c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_RTC_Init+0x8c>)
 800091e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000922:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_RTC_Init+0x8c>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <MX_RTC_Init+0x8c>)
 800092c:	f003 ff3e 	bl	80047ac <HAL_RTC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000936:	f000 fa47 	bl	8000dc8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_RTC_Init+0x8c>)
 8000950:	f004 f83a 	bl	80049c8 <HAL_RTCEx_PrivilegeModeSet>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800095a:	f000 fa35 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000194 	.word	0x20000194
 800096c:	40002800 	.word	0x40002800

08000970 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000986:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800098a:	f7ff fe23 	bl	80005d4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff fe08 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe05 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800099a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <MX_UCPD1_Init+0x64>)
 80009ae:	f004 ffee 	bl	800598e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009b8:	2303      	movs	r3, #3
 80009ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_UCPD1_Init+0x68>)
 80009c6:	f004 ffe2 	bl	800598e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	42020400 	.word	0x42020400
 80009d8:	42020000 	.word	0x42020000

080009dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <MX_USB_PCD_Init+0x4c>)
 80009e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 80009e8:	2208      	movs	r2, #8
 80009ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_USB_PCD_Init+0x48>)
 8000a12:	f002 f849 	bl	8002aa8 <HAL_PCD_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a1c:	f000 f9d4 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200001bc 	.word	0x200001bc
 8000a28:	4000d400 	.word	0x4000d400

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b4e      	ldr	r3, [pc, #312]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a4d      	ldr	r2, [pc, #308]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b48      	ldr	r3, [pc, #288]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a47      	ldr	r2, [pc, #284]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b45      	ldr	r3, [pc, #276]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a72:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a41      	ldr	r2, [pc, #260]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000a8a:	f002 f98b 	bl	8002da4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a3a      	ldr	r2, [pc, #232]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <MX_GPIO_Init+0x150>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	4835      	ldr	r0, [pc, #212]	; (8000b80 <MX_GPIO_Init+0x154>)
 8000aac:	f001 ff82 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	4833      	ldr	r0, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x158>)
 8000ab8:	f001 ff7c 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	21a0      	movs	r1, #160	; 0xa0
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <MX_GPIO_Init+0x15c>)
 8000ac2:	f001 ff77 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_Pin boton2_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|boton2_Pin;
 8000ac6:	f242 0302 	movw	r3, #8194	; 0x2002
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000acc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4828      	ldr	r0, [pc, #160]	; (8000b80 <MX_GPIO_Init+0x154>)
 8000ade:	f001 fde9 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ae2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4823      	ldr	r0, [pc, #140]	; (8000b88 <MX_GPIO_Init+0x15c>)
 8000afa:	f001 fddb 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_GPIO_Init+0x154>)
 8000b16:	f001 fdcd 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <MX_GPIO_Init+0x158>)
 8000b34:	f001 fdbe 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000b38:	23a0      	movs	r3, #160	; 0xa0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <MX_GPIO_Init+0x15c>)
 8000b50:	f001 fdb0 	bl	80026b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	200c      	movs	r0, #12
 8000b5a:	f001 fd76 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b5e:	200c      	movs	r0, #12
 8000b60:	f001 fd8d 	bl	800267e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2018      	movs	r0, #24
 8000b6a:	f001 fd6e 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b6e:	2018      	movs	r0, #24
 8000b70:	f001 fd85 	bl	800267e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	42020800 	.word	0x42020800
 8000b84:	42020000 	.word	0x42020000
 8000b88:	42020400 	.word	0x42020400

08000b8c <cambiarEstado>:

/* USER CODE BEGIN 4 */
void cambiarEstado(int botonPres){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	switch (estadoActual) {
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <cambiarEstado+0xb4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d84a      	bhi.n	8000c32 <cambiarEstado+0xa6>
 8000b9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <cambiarEstado+0x18>)
 8000b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba2:	bf00      	nop
 8000ba4:	08000bb5 	.word	0x08000bb5
 8000ba8:	08000bd1 	.word	0x08000bd1
 8000bac:	08000bed 	.word	0x08000bed
 8000bb0:	08000c09 	.word	0x08000c09
	case S0:
		if(botonPres == 1) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d103      	bne.n	8000bc2 <cambiarEstado+0x36>
			estadoActual = S1;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <cambiarEstado+0xb4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
		} else if(botonPres == 2){
			estadoActual = S3;
		}
		break;
 8000bc0:	e030      	b.n	8000c24 <cambiarEstado+0x98>
		} else if(botonPres == 2){
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d12d      	bne.n	8000c24 <cambiarEstado+0x98>
			estadoActual = S3;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <cambiarEstado+0xb4>)
 8000bca:	2203      	movs	r2, #3
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e029      	b.n	8000c24 <cambiarEstado+0x98>
		case S1:
			if(botonPres == 1) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d103      	bne.n	8000bde <cambiarEstado+0x52>
				estadoActual = S2;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <cambiarEstado+0xb4>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	701a      	strb	r2, [r3, #0]
			} else if(botonPres == 2) {
				estadoActual = S0;
			}
			break;
 8000bdc:	e024      	b.n	8000c28 <cambiarEstado+0x9c>
			} else if(botonPres == 2) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d121      	bne.n	8000c28 <cambiarEstado+0x9c>
				estadoActual = S0;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <cambiarEstado+0xb4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			break;
 8000bea:	e01d      	b.n	8000c28 <cambiarEstado+0x9c>
			case S2:
				if(botonPres == 1) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d103      	bne.n	8000bfa <cambiarEstado+0x6e>
					estadoActual = S3;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <cambiarEstado+0xb4>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	701a      	strb	r2, [r3, #0]
				} else if(botonPres == 2) {
					estadoActual = S1;
				}
				break;
 8000bf8:	e018      	b.n	8000c2c <cambiarEstado+0xa0>
				} else if(botonPres == 2) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d115      	bne.n	8000c2c <cambiarEstado+0xa0>
					estadoActual = S1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <cambiarEstado+0xb4>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
				break;
 8000c06:	e011      	b.n	8000c2c <cambiarEstado+0xa0>
				case S3:
					if(botonPres == 1) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d103      	bne.n	8000c16 <cambiarEstado+0x8a>
						estadoActual = S0;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <cambiarEstado+0xb4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
					} else if(botonPres == 2) {
						estadoActual = S2;
					}
					break;
 8000c14:	e00c      	b.n	8000c30 <cambiarEstado+0xa4>
					} else if(botonPres == 2) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d109      	bne.n	8000c30 <cambiarEstado+0xa4>
						estadoActual = S2;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <cambiarEstado+0xb4>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	701a      	strb	r2, [r3, #0]
					break;
 8000c22:	e005      	b.n	8000c30 <cambiarEstado+0xa4>
		break;
 8000c24:	bf00      	nop
 8000c26:	e004      	b.n	8000c32 <cambiarEstado+0xa6>
			break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <cambiarEstado+0xa6>
				break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <cambiarEstado+0xa6>
					break;
 8000c30:	bf00      	nop
	}
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	200004b0 	.word	0x200004b0

08000c44 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_Pin){
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c54:	d102      	bne.n	8000c5c <HAL_GPIO_EXTI_Rising_Callback+0x18>
		cambiarEstado(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff ff98 	bl	8000b8c <cambiarEstado>
	}
	if(GPIO_Pin == boton2_Pin){
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d102      	bne.n	8000c68 <HAL_GPIO_EXTI_Rising_Callback+0x24>
		cambiarEstado(2);
 8000c62:	2002      	movs	r0, #2
 8000c64:	f7ff ff92 	bl	8000b8c <cambiarEstado>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_write>:

int _write(int file, char *ptr, int len){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e009      	b.n	8000c96 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fc62 	bl	8000554 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbf1      	blt.n	8000c82 <_write+0x12>
	}
	return len;
 8000c9e:	687b      	ldr	r3, [r7, #4]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <funcionEstadoS0>:

Estado funcionEstadoS0(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	if(estadoActual != estadoFinal){
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <funcionEstadoS0+0x34>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <funcionEstadoS0+0x38>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d00d      	beq.n	8000cd4 <funcionEstadoS0+0x2c>
		printf("Se encuentra en el estado: 0\n\r");
 8000cb8:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <funcionEstadoS0+0x3c>)
 8000cba:	f004 ffc1 	bl	8005c40 <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <funcionEstadoS0+0x40>)
 8000cc6:	f001 fe75 	bl	80029b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <funcionEstadoS0+0x44>)
 8000cd0:	f001 fe70 	bl	80029b4 <HAL_GPIO_WritePin>
	}
	return estadoActual;
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <funcionEstadoS0+0x34>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200004b0 	.word	0x200004b0
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	0800695c 	.word	0x0800695c
 8000ce8:	42020000 	.word	0x42020000
 8000cec:	42020800 	.word	0x42020800

08000cf0 <funcionEstadoS1>:

Estado funcionEstadoS1(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	if(estadoActual != estadoFinal){
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <funcionEstadoS1+0x34>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <funcionEstadoS1+0x38>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d00d      	beq.n	8000d1c <funcionEstadoS1+0x2c>
		printf("Se encuentra en el estado: 1\n\r");
 8000d00:	480a      	ldr	r0, [pc, #40]	; (8000d2c <funcionEstadoS1+0x3c>)
 8000d02:	f004 ff9d 	bl	8005c40 <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <funcionEstadoS1+0x40>)
 8000d0e:	f001 fe51 	bl	80029b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <funcionEstadoS1+0x44>)
 8000d18:	f001 fe4c 	bl	80029b4 <HAL_GPIO_WritePin>
	}
	return estadoActual;
 8000d1c:	4b01      	ldr	r3, [pc, #4]	; (8000d24 <funcionEstadoS1+0x34>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200004b0 	.word	0x200004b0
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	0800697c 	.word	0x0800697c
 8000d30:	42020000 	.word	0x42020000
 8000d34:	42020800 	.word	0x42020800

08000d38 <funcionEstadoS2>:

Estado funcionEstadoS2(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	if(estadoActual != estadoFinal){
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <funcionEstadoS2+0x34>)
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <funcionEstadoS2+0x38>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d00d      	beq.n	8000d64 <funcionEstadoS2+0x2c>
		printf("Se encuentra en el estado: 2\n\r");
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <funcionEstadoS2+0x3c>)
 8000d4a:	f004 ff79 	bl	8005c40 <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <funcionEstadoS2+0x40>)
 8000d56:	f001 fe2d 	bl	80029b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <funcionEstadoS2+0x44>)
 8000d60:	f001 fe28 	bl	80029b4 <HAL_GPIO_WritePin>
	}
	return estadoActual;
 8000d64:	4b01      	ldr	r3, [pc, #4]	; (8000d6c <funcionEstadoS2+0x34>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200004b0 	.word	0x200004b0
 8000d70:	20000000 	.word	0x20000000
 8000d74:	0800699c 	.word	0x0800699c
 8000d78:	42020000 	.word	0x42020000
 8000d7c:	42020800 	.word	0x42020800

08000d80 <funcionEstadoS3>:

Estado funcionEstadoS3(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	if(estadoActual != estadoFinal){
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <funcionEstadoS3+0x34>)
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <funcionEstadoS3+0x38>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d00d      	beq.n	8000dac <funcionEstadoS3+0x2c>
		printf("Se encuentra en el estado: 3\n\r");
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <funcionEstadoS3+0x3c>)
 8000d92:	f004 ff55 	bl	8005c40 <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <funcionEstadoS3+0x40>)
 8000d9e:	f001 fe09 	bl	80029b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <funcionEstadoS3+0x44>)
 8000da8:	f001 fe04 	bl	80029b4 <HAL_GPIO_WritePin>
	}
	return estadoActual;
 8000dac:	4b01      	ldr	r3, [pc, #4]	; (8000db4 <funcionEstadoS3+0x34>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200004b0 	.word	0x200004b0
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	080069bc 	.word	0x080069bc
 8000dc0:	42020000 	.word	0x42020000
 8000dc4:	42020800 	.word	0x42020800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_MspInit+0x44>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x44>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x44>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ae      	sub	sp, #184	; 0xb8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2294      	movs	r2, #148	; 0x94
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 ff54 	bl	8005cea <memset>
  if(hadc->Instance==ADC1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_ADC_MspInit+0xa8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d137      	bne.n	8000ebc <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e52:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 ff8e 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000e6a:	f7ff ffad 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_ADC_MspInit+0xac>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <HAL_ADC_MspInit+0xac>)
 8000e74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_ADC_MspInit+0xac>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_ADC_MspInit+0xac>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_ADC_MspInit+0xac>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_ADC_MspInit+0xac>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_ADC_MspInit+0xb0>)
 8000eb8:	f001 fbfc 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	37b8      	adds	r7, #184	; 0xb8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	42028000 	.word	0x42028000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	42020800 	.word	0x42020800

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0ae      	sub	sp, #184	; 0xb8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	2294      	movs	r2, #148	; 0x94
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 fefa 	bl	8005cea <memset>
  if(huart->Instance==LPUART1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_UART_MspInit+0xb4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d13d      	bne.n	8000f7c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f00:	2320      	movs	r3, #32
 8000f02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 ff37 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f18:	f7ff ff56 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_UART_MspInit+0xb8>)
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_UART_MspInit+0xb8>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0xb8>)
 8000f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0xb8>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_UART_MspInit+0xb8>)
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0xb8>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000f4c:	f001 ff2a 	bl	8002da4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000f50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0xbc>)
 8000f78:	f001 fb9c 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	37b8      	adds	r7, #184	; 0xb8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40008000 	.word	0x40008000
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	42021800 	.word	0x42021800

08000f90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0a8      	sub	sp, #160	; 0xa0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2294      	movs	r2, #148	; 0x94
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fea2 	bl	8005cea <memset>
  if(hrtc->Instance==RTC)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_RTC_MspInit+0x74>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d124      	bne.n	8000ffa <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fedc 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fce:	f7ff fefb 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_RTC_MspInit+0x78>)
 8000fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_RTC_MspInit+0x78>)
 8000fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_RTC_MspInit+0x78>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_RTC_MspInit+0x78>)
 8000fe8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_RTC_MspInit+0x78>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	37a0      	adds	r7, #160	; 0xa0
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40002800 	.word	0x40002800
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ae      	sub	sp, #184	; 0xb8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2294      	movs	r2, #148	; 0x94
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f004 fe5c 	bl	8005cea <memset>
  if(hpcd->Instance==USB)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <HAL_PCD_MspInit+0xb4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d13d      	bne.n	80010b8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fe97 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001058:	f7ff feb6 	bl	8000dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_PCD_MspInit+0xb8>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_PCD_MspInit+0xb8>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_PCD_MspInit+0xb8>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001074:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800108e:	230a      	movs	r3, #10
 8001090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001098:	4619      	mov	r1, r3
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <HAL_PCD_MspInit+0xbc>)
 800109c:	f001 fb0a 	bl	80026b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_PCD_MspInit+0xb8>)
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_PCD_MspInit+0xb8>)
 80010a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010aa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_PCD_MspInit+0xb8>)
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	37b8      	adds	r7, #184	; 0xb8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	4000d400 	.word	0x4000d400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	42020000 	.word	0x42020000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 f9d8 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(boton2_Pin);
 8001124:	2002      	movs	r0, #2
 8001126:	f001 fc5d 	bl	80029e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001132:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001136:	f001 fc55 	bl	80029e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}

0800113e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e00a      	b.n	8001166 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001150:	f3af 8000 	nop.w
 8001154:	4601      	mov	r1, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	60ba      	str	r2, [r7, #8]
 800115c:	b2ca      	uxtb	r2, r1
 800115e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbf0      	blt.n	8001150 <_read+0x12>
  }

  return len;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a0:	605a      	str	r2, [r3, #4]
  return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_isatty>:

int _isatty(int file)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f004 fdba 	bl	8005d88 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20030000 	.word	0x20030000
 8001240:	00000400 	.word	0x00000400
 8001244:	200004b4 	.word	0x200004b4
 8001248:	20000608 	.word	0x20000608

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001276:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d107      	bne.n	8001292 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001282:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 8001284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e005      	b.n	800129e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001292:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800129e:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <SystemCoreClockUpdate+0x148>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d866      	bhi.n	8001382 <SystemCoreClockUpdate+0x112>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <SystemCoreClockUpdate+0x4c>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012f1 	.word	0x080012f1
 80012c0:	08001383 	.word	0x08001383
 80012c4:	08001383 	.word	0x08001383
 80012c8:	08001383 	.word	0x08001383
 80012cc:	080012f9 	.word	0x080012f9
 80012d0:	08001383 	.word	0x08001383
 80012d4:	08001383 	.word	0x08001383
 80012d8:	08001383 	.word	0x08001383
 80012dc:	08001301 	.word	0x08001301
 80012e0:	08001383 	.word	0x08001383
 80012e4:	08001383 	.word	0x08001383
 80012e8:	08001383 	.word	0x08001383
 80012ec:	08001309 	.word	0x08001309
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80012f0:	4a32      	ldr	r2, [pc, #200]	; (80013bc <SystemCoreClockUpdate+0x14c>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	6013      	str	r3, [r2, #0]
      break;
 80012f6:	e048      	b.n	800138a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012f8:	4b30      	ldr	r3, [pc, #192]	; (80013bc <SystemCoreClockUpdate+0x14c>)
 80012fa:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <SystemCoreClockUpdate+0x150>)
 80012fc:	601a      	str	r2, [r3, #0]
      break;
 80012fe:	e044      	b.n	800138a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <SystemCoreClockUpdate+0x14c>)
 8001302:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <SystemCoreClockUpdate+0x154>)
 8001304:	601a      	str	r2, [r3, #0]
      break;
 8001306:	e040      	b.n	800138a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	3301      	adds	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <SystemCoreClockUpdate+0xbe>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d006      	beq.n	800133a <SystemCoreClockUpdate+0xca>
 800132c:	e00b      	b.n	8001346 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <SystemCoreClockUpdate+0x150>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	613b      	str	r3, [r7, #16]
          break;
 8001338:	e00b      	b.n	8001352 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800133a:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <SystemCoreClockUpdate+0x154>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	613b      	str	r3, [r7, #16]
          break;
 8001344:	e005      	b.n	8001352 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	613b      	str	r3, [r7, #16]
          break;
 8001350:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0e5b      	lsrs	r3, r3, #25
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	3301      	adds	r3, #1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <SystemCoreClockUpdate+0x14c>)
 800137e:	6013      	str	r3, [r2, #0]
      break;
 8001380:	e003      	b.n	800138a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <SystemCoreClockUpdate+0x14c>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	6013      	str	r3, [r2, #0]
      break;
 8001388:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <SystemCoreClockUpdate+0x144>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <SystemCoreClockUpdate+0x158>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <SystemCoreClockUpdate+0x14c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	4a05      	ldr	r2, [pc, #20]	; (80013bc <SystemCoreClockUpdate+0x14c>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	080069f4 	.word	0x080069f4
 80013bc:	20000014 	.word	0x20000014
 80013c0:	00f42400 	.word	0x00f42400
 80013c4:	007a1200 	.word	0x007a1200
 80013c8:	080069dc 	.word	0x080069dc

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff ff3c 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <LoopForever+0xa>)
	ldr	r3, =_edata
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
	ldr	r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <LoopForever+0x16>)
	cmp	r2, r3
 80013f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013fa:	f004 fccb 	bl	8005d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff f901 	bl	8000604 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001404:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001408:	08006aa0 	.word	0x08006aa0
	ldr	r0, =_sdata
 800140c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001410:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001414:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8001418:	20000608 	.word	0x20000608

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>

0800141e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001428:	2004      	movs	r0, #4
 800142a:	f001 f903 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800142e:	f7ff ff1f 	bl	8001270 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f80e 	bl	8001454 <HAL_InitTick>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	e001      	b.n	8001448 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001444:	f7ff fcc6 	bl	8000dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001448:	79fb      	ldrb	r3, [r7, #7]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <HAL_InitTick+0x6c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d023      	beq.n	80014b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_InitTick+0x70>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_InitTick+0x6c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f001 f90b 	bl	800269a <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b07      	cmp	r3, #7
 800148e:	d809      	bhi.n	80014a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f001 f8d7 	bl	800264a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_InitTick+0x74>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e007      	b.n	80014b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e004      	b.n	80014b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e001      	b.n	80014b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000001c 	.word	0x2000001c
 80014c4:	20000014 	.word	0x20000014
 80014c8:	20000018 	.word	0x20000018

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000001c 	.word	0x2000001c
 80014f0:	200004b8 	.word	0x200004b8

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200004b8 	.word	0x200004b8

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000001c 	.word	0x2000001c

08001554 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3360      	adds	r3, #96	; 0x60
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <LL_ADC_SetOffset+0x44>)
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	03fff000 	.word	0x03fff000

08001604 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3360      	adds	r3, #96	; 0x60
 8001612:	461a      	mov	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3360      	adds	r3, #96	; 0x60
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	615a      	str	r2, [r3, #20]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3330      	adds	r3, #48	; 0x30
 800169c:	461a      	mov	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	4413      	add	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	211f      	movs	r1, #31
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0e9b      	lsrs	r3, r3, #26
 80016c4:	f003 011f 	and.w	r1, r3, #31
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	431a      	orrs	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3314      	adds	r3, #20
 80016f4:	461a      	mov	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	0e5b      	lsrs	r3, r3, #25
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0d1b      	lsrs	r3, r3, #20
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2107      	movs	r1, #7
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	401a      	ands	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0d1b      	lsrs	r3, r3, #20
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0318 	and.w	r3, r3, #24
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001760:	40d9      	lsrs	r1, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	400b      	ands	r3, r1
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	431a      	orrs	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	0007ffff 	.word	0x0007ffff

08001784 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6093      	str	r3, [r2, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800180c:	d101      	bne.n	8001812 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <LL_ADC_IsEnabled+0x18>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <LL_ADC_IsEnabled+0x1a>
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b04      	cmp	r3, #4
 8001858:	d101      	bne.n	800185e <LL_ADC_REG_IsConversionOngoing+0x18>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b08      	cmp	r3, #8
 800187e:	d101      	bne.n	8001884 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e12e      	b.n	8001b0c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff faad 	bl	8000e1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff67 	bl	80017a8 <LL_ADC_IsDeepPowerDownEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff4d 	bl	8001784 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff82 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff66 	bl	80017d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001904:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_ADC_Init+0x280>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	4a83      	ldr	r2, [pc, #524]	; (8001b18 <HAL_ADC_Init+0x284>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	3301      	adds	r3, #1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001918:	e002      	b.n	8001920 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3b01      	subs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f9      	bne.n	800191a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff64 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff75 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 800195c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 80c7 	bne.w	8001afa <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 80c3 	bne.w	8001afa <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800197c:	f043 0202 	orr.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff49 	bl	8001820 <LL_ADC_IsEnabled>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d110      	bne.n	80019b6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001994:	4861      	ldr	r0, [pc, #388]	; (8001b1c <HAL_ADC_Init+0x288>)
 8001996:	f7ff ff43 	bl	8001820 <LL_ADC_IsEnabled>
 800199a:	4604      	mov	r4, r0
 800199c:	4860      	ldr	r0, [pc, #384]	; (8001b20 <HAL_ADC_Init+0x28c>)
 800199e:	f7ff ff3f 	bl	8001820 <LL_ADC_IsEnabled>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4323      	orrs	r3, r4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4619      	mov	r1, r3
 80019b0:	485c      	ldr	r0, [pc, #368]	; (8001b24 <HAL_ADC_Init+0x290>)
 80019b2:	f7ff fdcf 	bl	8001554 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e5b      	ldrb	r3, [r3, #25]
 80019ba:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019c6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019cc:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	3b01      	subs	r3, #1
 80019ea:	045b      	lsls	r3, r3, #17
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_ADC_Init+0x294>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	69b9      	ldr	r1, [r7, #24]
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff20 	bl	800186c <LL_ADC_INJ_IsConversionOngoing>
 8001a2c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d140      	bne.n	8001ab6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d13d      	bne.n	8001ab6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e1b      	ldrb	r3, [r3, #24]
 8001a42:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a44:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a4c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5c:	f023 0306 	bic.w	r3, r3, #6
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d118      	bne.n	8001aa6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a96:	430a      	orrs	r2, r1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	e007      	b.n	8001ab6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10c      	bne.n	8001ad8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f023 010f 	bic.w	r1, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad6:	e007      	b.n	8001ae8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020f 	bic.w	r2, r2, #15
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f023 0303 	bic.w	r3, r3, #3
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	; 0x58
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3724      	adds	r7, #36	; 0x24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}
 8001b14:	20000014 	.word	0x20000014
 8001b18:	053e2d63 	.word	0x053e2d63
 8001b1c:	42028000 	.word	0x42028000
 8001b20:	42028100 	.word	0x42028100
 8001b24:	42028300 	.word	0x42028300
 8001b28:	fff0c007 	.word	0xfff0c007

08001b2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b0b7      	sub	sp, #220	; 0xdc
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x22>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e3c1      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x7a6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fe73 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 83a6 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	f7ff fd89 	bl	800168c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe61 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001b84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fe6d 	bl	800186c <LL_ADC_INJ_IsConversionOngoing>
 8001b92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 81c1 	bne.w	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 81bc 	bne.w	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7ff fd90 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fd4a 	bl	8001666 <LL_ADC_SetSamplingTimeCommonConfig>
 8001bd2:	e00e      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	461a      	mov	r2, r3
 8001be2:	f7ff fd7f 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fd3a 	bl	8001666 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00a      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6919      	ldr	r1, [r3, #16]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c24:	f7ff fcca 	bl	80015bc <LL_ADC_SetOffset>
 8001c28:	e17b      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fce7 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x12a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fcdc 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	e01e      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x168>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fcd1 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001c84:	2320      	movs	r3, #32
 8001c86:	e004      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x180>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	e018      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1b2>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	e004      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d106      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fca0 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fc84 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10a      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1f0>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fc79 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	f003 021f 	and.w	r2, r3, #31
 8001d1a:	e01e      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x22e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fc6e 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e004      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x246>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	e018      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x278>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e004      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fc3d 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fc21 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2b6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc16 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	e01e      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x2f4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2102      	movs	r1, #2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fc0b 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e004      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x30c>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	e016      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x33a>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e004      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d106      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2102      	movs	r1, #2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fbdc 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fbc0 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10a      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x378>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2103      	movs	r1, #3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fbb5 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	f003 021f 	and.w	r2, r3, #31
 8001ea2:	e017      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x3a8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2103      	movs	r1, #3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fbaa 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e003      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x3c0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	e011      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x3e4>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001efc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001f04:	2320      	movs	r3, #32
 8001f06:	e003      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb87 	bl	8001630 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fc7a 	bl	8001820 <LL_ADC_IsEnabled>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 81c9 	bne.w	80022c6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f7ff fbfb 	bl	800173c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a8f      	ldr	r2, [pc, #572]	; (8002188 <HAL_ADC_ConfigChannel+0x65c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 8131 	bne.w	80021b4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10b      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x44e>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	bf94      	ite	ls
 8001f72:	2301      	movls	r3, #1
 8001f74:	2300      	movhi	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e019      	b.n	8001fae <HAL_ADC_ConfigChannel+0x482>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	bf94      	ite	ls
 8001fa8:	2301      	movls	r3, #1
 8001faa:	2300      	movhi	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d079      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d107      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x4a2>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	069b      	lsls	r3, r3, #26
 8001fc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fcc:	e015      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x4ce>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fde:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	069b      	lsls	r3, r3, #26
 8001ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_ADC_ConfigChannel+0x4ee>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	e017      	b.n	800204a <HAL_ADC_ConfigChannel+0x51e>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800202c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e003      	b.n	800203e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	ea42 0103 	orr.w	r1, r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x544>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	3301      	adds	r3, #1
 8002062:	f003 021f 	and.w	r2, r3, #31
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	051b      	lsls	r3, r3, #20
 800206e:	e018      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x576>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800208c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f003 021f 	and.w	r2, r3, #31
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a2:	430b      	orrs	r3, r1
 80020a4:	e081      	b.n	80021aa <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d107      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x596>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	3301      	adds	r3, #1
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c0:	e015      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5c2>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	069b      	lsls	r3, r3, #26
 80020ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_ADC_ConfigChannel+0x5e2>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	e017      	b.n	800213e <HAL_ADC_ConfigChannel+0x612>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	61fb      	str	r3, [r7, #28]
  return result;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	ea42 0103 	orr.w	r1, r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10d      	bne.n	800216a <HAL_ADC_ConfigChannel+0x63e>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	3301      	adds	r3, #1
 8002156:	f003 021f 	and.w	r2, r3, #31
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	3b1e      	subs	r3, #30
 8002162:	051b      	lsls	r3, r3, #20
 8002164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002168:	e01e      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x67c>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	613b      	str	r3, [r7, #16]
  return result;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e006      	b.n	8002194 <HAL_ADC_ConfigChannel+0x668>
 8002186:	bf00      	nop
 8002188:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	3b1e      	subs	r3, #30
 80021a2:	051b      	lsls	r3, r3, #20
 80021a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7ff fa98 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <HAL_ADC_ConfigChannel+0x7b0>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8082 	beq.w	80022c6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c2:	4847      	ldr	r0, [pc, #284]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 80021c4:	f7ff f9ec 	bl	80015a0 <LL_ADC_GetCommonPathInternalCh>
 80021c8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	4845      	ldr	r0, [pc, #276]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 80021ce:	f7ff fb27 	bl	8001820 <LL_ADC_IsEnabled>
 80021d2:	4604      	mov	r4, r0
 80021d4:	4844      	ldr	r0, [pc, #272]	; (80022e8 <HAL_ADC_ConfigChannel+0x7bc>)
 80021d6:	f7ff fb23 	bl	8001820 <LL_ADC_IsEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	4323      	orrs	r3, r4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15e      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a41      	ldr	r2, [pc, #260]	; (80022ec <HAL_ADC_ConfigChannel+0x7c0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d127      	bne.n	800223c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d121      	bne.n	800223c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a39      	ldr	r2, [pc, #228]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d161      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002206:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800220a:	4619      	mov	r1, r3
 800220c:	4834      	ldr	r0, [pc, #208]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800220e:	f7ff f9b4 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <HAL_ADC_ConfigChannel+0x7c8>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800222a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800222c:	e002      	b.n	8002234 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3b01      	subs	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800223a:	e044      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d113      	bne.n	800226e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d134      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002264:	4619      	mov	r1, r3
 8002266:	481e      	ldr	r0, [pc, #120]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002268:	f7ff f987 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800226c:	e02b      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_ADC_ConfigChannel+0x7d0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d126      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d120      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11b      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800228e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002292:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002296:	4619      	mov	r1, r3
 8002298:	4811      	ldr	r0, [pc, #68]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800229a:	f7ff f96e 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
 800229e:	e012      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022b2:	e008      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80022ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	37dc      	adds	r7, #220	; 0xdc
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	80080000 	.word	0x80080000
 80022e0:	42028300 	.word	0x42028300
 80022e4:	42028000 	.word	0x42028000
 80022e8:	42028100 	.word	0x42028100
 80022ec:	c7520000 	.word	0xc7520000
 80022f0:	20000014 	.word	0x20000014
 80022f4:	053e2d63 	.word	0x053e2d63
 80022f8:	cb840000 	.word	0xcb840000
 80022fc:	80000001 	.word	0x80000001

08002300 <LL_ADC_IsEnabled>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <LL_ADC_IsEnabled+0x18>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <LL_ADC_IsEnabled+0x1a>
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_REG_IsConversionOngoing>:
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d101      	bne.n	800233e <LL_ADC_REG_IsConversionOngoing+0x18>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b0a1      	sub	sp, #132	; 0x84
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002366:	2302      	movs	r3, #2
 8002368:	e089      	b.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002372:	2300      	movs	r3, #0
 8002374:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002376:	2300      	movs	r3, #0
 8002378:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002384:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e001      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e068      	b.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ffb9 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 80023b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ffb3 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d14a      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80023c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d147      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80023ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d027      	beq.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ea:	035b      	lsls	r3, r3, #13
 80023ec:	430b      	orrs	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f4:	4824      	ldr	r0, [pc, #144]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80023f6:	f7ff ff83 	bl	8002300 <LL_ADC_IsEnabled>
 80023fa:	4604      	mov	r4, r0
 80023fc:	4823      	ldr	r0, [pc, #140]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023fe:	f7ff ff7f 	bl	8002300 <LL_ADC_IsEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	4323      	orrs	r3, r4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d132      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800240a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002412:	f023 030f 	bic.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	6811      	ldr	r1, [r2, #0]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	6892      	ldr	r2, [r2, #8]
 800241e:	430a      	orrs	r2, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002424:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002426:	e023      	b.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002432:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002434:	4814      	ldr	r0, [pc, #80]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002436:	f7ff ff63 	bl	8002300 <LL_ADC_IsEnabled>
 800243a:	4604      	mov	r4, r0
 800243c:	4813      	ldr	r0, [pc, #76]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800243e:	f7ff ff5f 	bl	8002300 <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	4323      	orrs	r3, r4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d112      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800244a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002452:	f023 030f 	bic.w	r3, r3, #15
 8002456:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002458:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800245a:	e009      	b.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800246e:	e000      	b.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002470:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800247a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800247e:	4618      	mov	r0, r3
 8002480:	3784      	adds	r7, #132	; 0x84
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop
 8002488:	42028000 	.word	0x42028000
 800248c:	42028100 	.word	0x42028100
 8002490:	42028300 	.word	0x42028300

08002494 <__NVIC_SetPriorityGrouping>:
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0152      	lsls	r2, r2, #5
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0152      	lsls	r2, r2, #5
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	bf28      	it	cs
 80025a6:	2303      	movcs	r3, #3
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3303      	adds	r3, #3
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	2107      	movs	r1, #7
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff29 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff40 	bl	80024dc <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff90 	bl	8002588 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5f 	bl	8002534 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff33 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa4 	bl	80025f0 <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026c2:	e158      	b.n	8002976 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 814a 	beq.w	8002970 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d005      	beq.n	80026f4 <HAL_GPIO_Init+0x40>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d130      	bne.n	8002756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800272a:	2201      	movs	r2, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0201 	and.w	r2, r3, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b03      	cmp	r3, #3
 8002760:	d017      	beq.n	8002792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80a4 	beq.w	8002970 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002828:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3318      	adds	r3, #24
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_GPIO_Init+0x2e4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d025      	beq.n	80028a0 <HAL_GPIO_Init+0x1ec>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a51      	ldr	r2, [pc, #324]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d01f      	beq.n	800289c <HAL_GPIO_Init+0x1e8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a50      	ldr	r2, [pc, #320]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d019      	beq.n	8002898 <HAL_GPIO_Init+0x1e4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <HAL_GPIO_Init+0x2f0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_GPIO_Init+0x1e0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a4e      	ldr	r2, [pc, #312]	; (80029a8 <HAL_GPIO_Init+0x2f4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00d      	beq.n	8002890 <HAL_GPIO_Init+0x1dc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4d      	ldr	r2, [pc, #308]	; (80029ac <HAL_GPIO_Init+0x2f8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <HAL_GPIO_Init+0x1d8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <HAL_GPIO_Init+0x2fc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_GPIO_Init+0x1d4>
 8002884:	2306      	movs	r3, #6
 8002886:	e00c      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002888:	2307      	movs	r3, #7
 800288a:	e00a      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 800288c:	2305      	movs	r3, #5
 800288e:	e008      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002890:	2304      	movs	r3, #4
 8002892:	e006      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002894:	2303      	movs	r3, #3
 8002896:	e004      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002898:	2302      	movs	r3, #2
 800289a:	e002      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 80028a0:	2300      	movs	r3, #0
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	f002 0203 	and.w	r2, r2, #3
 80028a8:	00d2      	lsls	r2, r2, #3
 80028aa:	4093      	lsls	r3, r2
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80028b2:	4938      	ldr	r1, [pc, #224]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3318      	adds	r3, #24
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c0:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e4:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800290e:	4a21      	ldr	r2, [pc, #132]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800293a:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f ae9f 	bne.w	80026c4 <HAL_GPIO_Init+0x10>
  }
}
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	4002f400 	.word	0x4002f400
 8002998:	42020000 	.word	0x42020000
 800299c:	42020400 	.word	0x42020400
 80029a0:	42020800 	.word	0x42020800
 80029a4:	42020c00 	.word	0x42020c00
 80029a8:	42021000 	.word	0x42021000
 80029ac:	42021400 	.word	0x42021400
 80029b0:	42021800 	.word	0x42021800

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe f91e 	bl	8000c44 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002a14:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f807 	bl	8002a30 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	4002f400 	.word	0x4002f400

08002a30 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e007      	b.n	8002a76 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0204 	bic.w	r2, r3, #4
 8002a6e:	4905      	ldr	r1, [pc, #20]	; (8002a84 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40030400 	.word	0x40030400

08002a88 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_ICACHE_Enable+0x1c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_ICACHE_Enable+0x1c>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40030400 	.word	0x40030400

08002aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aaa:	b08b      	sub	sp, #44	; 0x2c
 8002aac:	af06      	add	r7, sp, #24
 8002aae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0cb      	b.n	8002c52 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fa9c 	bl	800100c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 ffc1 	bl	8005a68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e040      	b.n	8002b6e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	3301      	adds	r3, #1
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	3303      	adds	r3, #3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3338      	adds	r3, #56	; 0x38
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	333c      	adds	r3, #60	; 0x3c
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	3340      	adds	r3, #64	; 0x40
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3b9      	bcc.n	8002aec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e044      	b.n	8002c08 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3301      	adds	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3b5      	bcc.n	8002b7e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	687e      	ldr	r6, [r7, #4]
 8002c1a:	466d      	mov	r5, sp
 8002c1c:	f106 0410 	add.w	r4, r6, #16
 8002c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	1d33      	adds	r3, r6, #4
 8002c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2c:	6838      	ldr	r0, [r7, #0]
 8002c2e:	f002 ff36 	bl	8005a9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f805 	bl	8002c5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40007000 	.word	0x40007000

08002cec <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cfc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002cfe:	f000 f861 	bl	8002dc4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d08:	d101      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e03e      	b.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1a:	d101      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e035      	b.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d101      	bne.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e02f      	b.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002d34:	4917      	ldr	r1, [pc, #92]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	09db      	lsrs	r3, r3, #7
 8002d4a:	2232      	movs	r2, #50	; 0x32
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	08db      	lsrs	r3, r3, #3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d5c:	e002      	b.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d70:	d102      	bne.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f2      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d84:	d101      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e000      	b.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40007000 	.word	0x40007000
 8002d98:	20000014 	.word	0x20000014
 8002d9c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002da0:	cccccccd 	.word	0xcccccccd

08002da4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db2:	6053      	str	r3, [r2, #4]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40007000 	.word	0x40007000

08002dc4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	e00a      	b.n	8002df8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	e001      	b.n	8002df8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002df4:	2300      	movs	r3, #0
 8002df6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002df8:	687b      	ldr	r3, [r7, #4]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40007000 	.word	0x40007000

08002e0c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f000 bcc2 	b.w	80037a4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e20:	4b99      	ldr	r3, [pc, #612]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e2a:	4b97      	ldr	r3, [pc, #604]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80e9 	beq.w	8003014 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4a>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	f040 8083 	bne.w	8002f56 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d17f      	bne.n	8002f56 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e56:	4b8c      	ldr	r3, [pc, #560]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_RCC_OscConfig+0x64>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f000 bc9a 	b.w	80037a4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e74:	4b84      	ldr	r3, [pc, #528]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_RCC_OscConfig+0x7e>
 8002e80:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e88:	e005      	b.n	8002e96 <HAL_RCC_OscConfig+0x8a>
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d224      	bcs.n	8002ee4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fe9c 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f000 bc7a 	b.w	80037a4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb0:	4b75      	ldr	r3, [pc, #468]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a74      	ldr	r2, [pc, #464]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002eb6:	f043 0308 	orr.w	r3, r3, #8
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4b72      	ldr	r3, [pc, #456]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	496f      	ldr	r1, [pc, #444]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ece:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	496a      	ldr	r1, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
 8002ee2:	e026      	b.n	8002f32 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a67      	ldr	r2, [pc, #412]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002eea:	f043 0308 	orr.w	r3, r3, #8
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	4962      	ldr	r1, [pc, #392]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f02:	4b61      	ldr	r3, [pc, #388]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	495d      	ldr	r1, [pc, #372]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fe5b 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f000 bc39 	b.w	80037a4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f32:	f000 fe17 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4a54      	ldr	r2, [pc, #336]	; (800308c <HAL_RCC_OscConfig+0x280>)
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <HAL_RCC_OscConfig+0x284>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fa87 	bl	8001454 <HAL_InitTick>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d060      	beq.n	8003012 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	f000 bc27 	b.w	80037a4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d039      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a49      	ldr	r2, [pc, #292]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fac3 	bl	80014f4 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f70:	e00f      	b.n	8002f92 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f72:	f7fe fabf 	bl	80014f4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d908      	bls.n	8002f92 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f000 bc09 	b.w	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0e9      	beq.n	8002f72 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a39      	ldr	r2, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	f043 0308 	orr.w	r3, r3, #8
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	4934      	ldr	r1, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	492f      	ldr	r1, [pc, #188]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
 8002fd0:	e020      	b.n	8003014 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fa89 	bl	80014f4 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe4:	e00e      	b.n	8003004 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe6:	f7fe fa85 	bl	80014f4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d907      	bls.n	8003004 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e3cf      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ea      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x1da>
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003012:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d07e      	beq.n	800311e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b08      	cmp	r3, #8
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x226>
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d10e      	bne.n	800304a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d10b      	bne.n	800304a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d06e      	beq.n	800311c <HAL_RCC_OscConfig+0x310>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d16a      	bne.n	800311c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e3ac      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x256>
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e024      	b.n	80030ac <HAL_RCC_OscConfig+0x2a0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306a:	d113      	bne.n	8003094 <HAL_RCC_OscConfig+0x288>
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8003072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a02      	ldr	r2, [pc, #8]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 800307e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e012      	b.n	80030ac <HAL_RCC_OscConfig+0x2a0>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	20000014 	.word	0x20000014
 8003090:	20000018 	.word	0x20000018
 8003094:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a8a      	ldr	r2, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 800309a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d019      	beq.n	80030e8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fa1e 	bl	80014f4 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ba:	e00e      	b.n	80030da <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030bc:	f7fe fa1a 	bl	80014f4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	; 0x64
 80030c8:	d907      	bls.n	80030da <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	4b7e      	ldr	r3, [pc, #504]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e364      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030da:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0ea      	beq.n	80030bc <HAL_RCC_OscConfig+0x2b0>
 80030e6:	e01a      	b.n	800311e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fa04 	bl	80014f4 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ee:	e00e      	b.n	800310e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fa00 	bl	80014f4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d907      	bls.n	800310e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fe:	4b71      	ldr	r3, [pc, #452]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e34a      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800310e:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1ea      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2e4>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d005      	beq.n	800313c <HAL_RCC_OscConfig+0x330>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d119      	bne.n	800316a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d116      	bne.n	800316a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_OscConfig+0x348>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e327      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	4958      	ldr	r1, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003168:	e04c      	b.n	8003204 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d029      	beq.n	80031c6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a53      	ldr	r2, [pc, #332]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe f9b9 	bl	80014f4 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003184:	e00e      	b.n	80031a4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003186:	f7fe f9b5 	bl	80014f4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d907      	bls.n	80031a4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e2ff      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a4:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ea      	beq.n	8003186 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b0:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	4941      	ldr	r1, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
 80031c4:	e01e      	b.n	8003204 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3e      	ldr	r2, [pc, #248]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80031cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe f98f 	bl	80014f4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d8:	e00e      	b.n	80031f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe f98b 	bl	80014f4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d907      	bls.n	80031f8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e2d5      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ea      	bne.n	80031da <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d062      	beq.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d038      	beq.n	800328a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d108      	bne.n	8003232 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003226:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f023 0310 	bic.w	r3, r3, #16
 800322c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003230:	e007      	b.n	8003242 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 800323a:	f043 0310 	orr.w	r3, r3, #16
 800323e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003248:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe f94f 	bl	80014f4 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003258:	e00f      	b.n	800327a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325a:	f7fe f94b 	bl	80014f4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b07      	cmp	r3, #7
 8003266:	d908      	bls.n	800327a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e294      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 800327c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0e8      	beq.n	800325a <HAL_RCC_OscConfig+0x44e>
 8003288:	e025      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 800328c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe f92b 	bl	80014f4 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a0:	e012      	b.n	80032c8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a2:	f7fe f927 	bl	80014f4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b07      	cmp	r3, #7
 80032ae:	d90b      	bls.n	80032c8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d004      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e270      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c8:	4ba8      	ldr	r3, [pc, #672]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e5      	bne.n	80032a2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 812d 	beq.w	800353e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032e8:	4ba0      	ldr	r3, [pc, #640]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b9d      	ldr	r3, [pc, #628]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a9c      	ldr	r2, [pc, #624]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003300:	4b9a      	ldr	r3, [pc, #616]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330c:	2301      	movs	r3, #1
 800330e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003310:	4b97      	ldr	r3, [pc, #604]	; (8003570 <HAL_RCC_OscConfig+0x764>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d11e      	bne.n	800335a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800331c:	4b94      	ldr	r3, [pc, #592]	; (8003570 <HAL_RCC_OscConfig+0x764>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a93      	ldr	r2, [pc, #588]	; (8003570 <HAL_RCC_OscConfig+0x764>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003328:	f7fe f8e4 	bl	80014f4 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332e:	e00e      	b.n	800334e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003330:	f7fe f8e0 	bl	80014f4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d907      	bls.n	800334e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333e:	4b8c      	ldr	r3, [pc, #560]	; (8003570 <HAL_RCC_OscConfig+0x764>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e22a      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x764>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ea      	beq.n	8003330 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01f      	beq.n	80033a6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003372:	4b7e      	ldr	r3, [pc, #504]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003382:	4b7a      	ldr	r3, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	4a78      	ldr	r2, [pc, #480]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003392:	e018      	b.n	80033c6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003394:	4b75      	ldr	r3, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	4a74      	ldr	r2, [pc, #464]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a4:	e00f      	b.n	80033c6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033a6:	4b71      	ldr	r3, [pc, #452]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	4a6f      	ldr	r2, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033b6:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80033be:	f023 0304 	bic.w	r3, r3, #4
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d068      	beq.n	80034a0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe f891 	bl	80014f4 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d4:	e011      	b.n	80033fa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe f88d 	bl	80014f4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d908      	bls.n	80033fa <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e8:	4b60      	ldr	r3, [pc, #384]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1d4      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fa:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0e6      	beq.n	80033d6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b00      	cmp	r3, #0
 8003412:	d022      	beq.n	800345a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003414:	4b55      	ldr	r3, [pc, #340]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	4a54      	ldr	r2, [pc, #336]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003424:	e011      	b.n	800344a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe f865 	bl	80014f4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d908      	bls.n	800344a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003438:	4b4c      	ldr	r3, [pc, #304]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1ac      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800344a:	4b48      	ldr	r3, [pc, #288]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0e6      	beq.n	8003426 <HAL_RCC_OscConfig+0x61a>
 8003458:	e068      	b.n	800352c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	4a42      	ldr	r2, [pc, #264]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800346a:	e011      	b.n	8003490 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe f842 	bl	80014f4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d908      	bls.n	8003490 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e189      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e6      	bne.n	800346c <HAL_RCC_OscConfig+0x660>
 800349e:	e045      	b.n	800352c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe f828 	bl	80014f4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a6:	e011      	b.n	80034cc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe f824 	bl	80014f4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d908      	bls.n	80034cc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ba:	4b2c      	ldr	r3, [pc, #176]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e16b      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e6      	bne.n	80034a8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_RCC_OscConfig+0x760>)
 80034f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034f8:	e011      	b.n	800351e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fd fffb 	bl	80014f4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d908      	bls.n	800351e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e142      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e6      	bne.n	80034fa <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800352c:	7ffb      	ldrb	r3, [r7, #31]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d04f      	beq.n	80035ea <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d028      	beq.n	80035a4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x760>)
 8003554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_RCC_OscConfig+0x760>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fd ffc7 	bl	80014f4 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003568:	e014      	b.n	8003594 <HAL_RCC_OscConfig+0x788>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003574:	f7fd ffbe 	bl	80014f4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d908      	bls.n	8003594 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003582:	4b8a      	ldr	r3, [pc, #552]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 8003584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e107      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003594:	4b85      	ldr	r3, [pc, #532]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 8003596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0e8      	beq.n	8003574 <HAL_RCC_OscConfig+0x768>
 80035a2:	e022      	b.n	80035ea <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035a4:	4b81      	ldr	r3, [pc, #516]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80035a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035aa:	4a80      	ldr	r2, [pc, #512]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd ff9e 	bl	80014f4 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ba:	e00f      	b.n	80035dc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035bc:	f7fd ff9a 	bl	80014f4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d908      	bls.n	80035dc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ca:	4b78      	ldr	r3, [pc, #480]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80035cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e0e3      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035dc:	4b73      	ldr	r3, [pc, #460]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80035de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e8      	bne.n	80035bc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80d7 	beq.w	80037a2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f4:	4b6d      	ldr	r3, [pc, #436]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	f000 8091 	beq.w	8003724 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	2b02      	cmp	r3, #2
 8003608:	d166      	bne.n	80036d8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a67      	ldr	r2, [pc, #412]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 8003610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fd ff6d 	bl	80014f4 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361c:	e00e      	b.n	800363c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361e:	f7fd ff69 	bl	80014f4 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d907      	bls.n	800363c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362c:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0b3      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800363c:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ea      	bne.n	800361e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003648:	4b58      	ldr	r3, [pc, #352]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4b58      	ldr	r3, [pc, #352]	; (80037b0 <HAL_RCC_OscConfig+0x9a4>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003658:	3a01      	subs	r2, #1
 800365a:	0112      	lsls	r2, r2, #4
 800365c:	4311      	orrs	r1, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003662:	0212      	lsls	r2, r2, #8
 8003664:	4311      	orrs	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800366a:	0852      	lsrs	r2, r2, #1
 800366c:	3a01      	subs	r2, #1
 800366e:	0552      	lsls	r2, r2, #21
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0652      	lsls	r2, r2, #25
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003682:	06d2      	lsls	r2, r2, #27
 8003684:	430a      	orrs	r2, r1
 8003686:	4949      	ldr	r1, [pc, #292]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800368c:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a46      	ldr	r2, [pc, #280]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 8003692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003698:	4b44      	ldr	r3, [pc, #272]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a43      	ldr	r2, [pc, #268]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd ff26 	bl	80014f4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	e00e      	b.n	80036ca <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fd ff22 	bl	80014f4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d907      	bls.n	80036ca <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e06c      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ea      	beq.n	80036ac <HAL_RCC_OscConfig+0x8a0>
 80036d6:	e064      	b.n	80037a2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a33      	ldr	r2, [pc, #204]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd ff06 	bl	80014f4 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ea:	e00e      	b.n	800370a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fd ff02 	bl	80014f4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d907      	bls.n	800370a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fa:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04c      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370a:	4b28      	ldr	r3, [pc, #160]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ea      	bne.n	80036ec <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003716:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	4924      	ldr	r1, [pc, #144]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <HAL_RCC_OscConfig+0x9a8>)
 800371e:	4013      	ands	r3, r2
 8003720:	60cb      	str	r3, [r1, #12]
 8003722:	e03e      	b.n	80037a2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e039      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_RCC_OscConfig+0x9a0>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0203 	and.w	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	429a      	cmp	r2, r3
 8003742:	d12c      	bne.n	800379e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	3b01      	subs	r3, #1
 8003750:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d123      	bne.n	800379e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d11b      	bne.n	800379e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d113      	bne.n	800379e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d109      	bne.n	800379e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3720      	adds	r7, #32
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	019f800c 	.word	0x019f800c
 80037b4:	feeefffc 	.word	0xfeeefffc

080037b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e11c      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b90      	ldr	r3, [pc, #576]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b8d      	ldr	r3, [pc, #564]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 020f 	bic.w	r2, r3, #15
 80037e6:	498b      	ldr	r1, [pc, #556]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b89      	ldr	r3, [pc, #548]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e104      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	429a      	cmp	r2, r3
 800381a:	d908      	bls.n	800382e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b7e      	ldr	r3, [pc, #504]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	497b      	ldr	r1, [pc, #492]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8085 	beq.w	8003946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d11f      	bne.n	8003884 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003844:	4b74      	ldr	r3, [pc, #464]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0da      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003854:	f000 fa26 	bl	8003ca4 <RCC_GetSysClockFreqFromPLLSource>
 8003858:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4a6f      	ldr	r2, [pc, #444]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d947      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003862:	4b6d      	ldr	r3, [pc, #436]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d141      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800386e:	4b6a      	ldr	r3, [pc, #424]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003876:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e036      	b.n	80038f2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d107      	bne.n	800389c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388c:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d115      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b6      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a4:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0aa      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	4b58      	ldr	r3, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0a2      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038c4:	f000 f8b0 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d90f      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038d2:	4b51      	ldr	r3, [pc, #324]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038de:	4b4e      	ldr	r3, [pc, #312]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e6:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4946      	ldr	r1, [pc, #280]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fdf6 	bl	80014f4 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e013      	b.n	8003934 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fd fdf2 	bl	80014f4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d90a      	bls.n	8003934 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 020c 	and.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e06a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003934:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 020c 	and.w	r2, r3, #12
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	429a      	cmp	r2, r3
 8003944:	d1e2      	bne.n	800390c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d105      	bne.n	8003958 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003956:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d010      	beq.n	8003986 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003970:	429a      	cmp	r2, r3
 8003972:	d208      	bcs.n	8003986 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4925      	ldr	r1, [pc, #148]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003986:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d210      	bcs.n	80039b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003994:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 020f 	bic.w	r2, r3, #15
 800399c:	491d      	ldr	r1, [pc, #116]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_RCC_ClockConfig+0x25c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e029      	b.n	8003a0a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4912      	ldr	r1, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e0:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	490a      	ldr	r1, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039f4:	f000 f8b6 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x268>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fd26 	bl	8001454 <HAL_InitTick>
 8003a08:	4603      	mov	r3, r0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	04c4b400 	.word	0x04c4b400
 8003a20:	20000014 	.word	0x20000014
 8003a24:	20000018 	.word	0x20000018

08003a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a40:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x34>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d121      	bne.n	8003a9a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d11e      	bne.n	8003a9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a5c:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a68:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e005      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003a84:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x130>)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d102      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa0:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x134>)
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aac:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x138>)
 8003aae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d146      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3301      	adds	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d003      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xb4>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d00d      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0xce>
 8003ada:	e019      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003adc:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x134>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ae6:	68d2      	ldr	r2, [r2, #12]
 8003ae8:	0a12      	lsrs	r2, r2, #8
 8003aea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	617b      	str	r3, [r7, #20]
        break;
 8003af4:	e019      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003af6:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x138>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	0a12      	lsrs	r2, r2, #8
 8003b04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
        break;
 8003b0e:	e00c      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b1a:	68d2      	ldr	r2, [r2, #12]
 8003b1c:	0a12      	lsrs	r2, r2, #8
 8003b1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	617b      	str	r3, [r7, #20]
        break;
 8003b28:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	0e5b      	lsrs	r3, r3, #25
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	3301      	adds	r3, #1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b44:	69bb      	ldr	r3, [r7, #24]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3724      	adds	r7, #36	; 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	080069f4 	.word	0x080069f4
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003b68:	f7ff ff5e 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x20>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	080069dc 	.word	0x080069dc

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff ffe8 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	080069ec 	.word	0x080069ec

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffd4 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	080069ec 	.word	0x080069ec

08003bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bf4:	f7ff f86c 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003bf8:	6138      	str	r0, [r7, #16]
 8003bfa:	e014      	b.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	; 0x58
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c14:	f7ff f85c 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003c18:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c32:	d10b      	bne.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d919      	bls.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2ba0      	cmp	r3, #160	; 0xa0
 8003c3e:	d902      	bls.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c40:	2302      	movs	r3, #2
 8003c42:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003c44:	e013      	b.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c46:	2301      	movs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003c4a:	e010      	b.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d902      	bls.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c52:	2303      	movs	r3, #3
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e00a      	b.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b80      	cmp	r3, #128	; 0x80
 8003c5c:	d102      	bne.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c5e:	2302      	movs	r3, #2
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e004      	b.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b70      	cmp	r3, #112	; 0x70
 8003c68:	d101      	bne.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 020f 	bic.w	r2, r3, #15
 8003c76:	490a      	ldr	r1, [pc, #40]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40022000 	.word	0x40022000

08003ca4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003caa:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d015      	beq.n	8003cf4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d839      	bhi.n	8003d42 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d01c      	beq.n	8003d0e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d133      	bne.n	8003d42 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cda:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	4a23      	ldr	r2, [pc, #140]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	0a12      	lsrs	r2, r2, #8
 8003ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	613b      	str	r3, [r7, #16]
      break;
 8003cf2:	e029      	b.n	8003d48 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf4:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cfe:	68d2      	ldr	r2, [r2, #12]
 8003d00:	0a12      	lsrs	r2, r2, #8
 8003d02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	613b      	str	r3, [r7, #16]
      break;
 8003d0c:	e01c      	b.n	8003d48 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d107      	bne.n	8003d2a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e005      	b.n	8003d36 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	613b      	str	r3, [r7, #16]
        break;
 8003d40:	e002      	b.n	8003d48 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
      break;
 8003d46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	0e5b      	lsrs	r3, r3, #25
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	3301      	adds	r3, #1
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d62:	683b      	ldr	r3, [r7, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40021000 	.word	0x40021000
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	007a1200 	.word	0x007a1200
 8003d7c:	080069f4 	.word	0x080069f4

08003d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d88:	2300      	movs	r3, #0
 8003d8a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d040      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da0:	2b80      	cmp	r3, #128	; 0x80
 8003da2:	d02a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003da4:	2b80      	cmp	r3, #128	; 0x80
 8003da6:	d825      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d026      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d821      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d006      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d81d      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d010      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003dc0:	e018      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc2:	4b8f      	ldr	r3, [pc, #572]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4a8e      	ldr	r2, [pc, #568]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dce:	e015      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fb56 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003de0:	e00c      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3320      	adds	r3, #32
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fc33 	bl	8004654 <RCCEx_PLLSAI2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
        break;
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e02:	4b7f      	ldr	r3, [pc, #508]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e08:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e10:	497b      	ldr	r1, [pc, #492]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e18:	e001      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d047      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e32:	d030      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e38:	d82a      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e3e:	d02a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e44:	d824      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e50:	d81e      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e5c:	e018      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e5e:	4b68      	ldr	r3, [pc, #416]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a67      	ldr	r2, [pc, #412]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e6a:	e015      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fb08 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3320      	adds	r3, #32
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fbe5 	bl	8004654 <RCCEx_PLLSAI2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	77fb      	strb	r3, [r7, #31]
        break;
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e9e:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4954      	ldr	r1, [pc, #336]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003eb4:	e001      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80ab 	beq.w	800401e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10d      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	4a48      	ldr	r2, [pc, #288]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee4:	4b46      	ldr	r3, [pc, #280]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f00:	f7fd faf8 	bl	80014f4 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f06:	e00f      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fd faf4 	bl	80014f4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d908      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f28:	4b36      	ldr	r3, [pc, #216]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0e9      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003f36:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d164      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f3e:	4b30      	ldr	r3, [pc, #192]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f48:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01f      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d019      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	4a24      	ldr	r2, [pc, #144]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	4a20      	ldr	r2, [pc, #128]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01f      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fd faab 	bl	80014f4 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa0:	e012      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fd faa7 	bl	80014f4 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d909      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003fc6:	e007      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0e5      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003fd8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003fda:	7ffb      	ldrb	r3, [r7, #31]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10c      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	4903      	ldr	r1, [pc, #12]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ff8:	e008      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	77bb      	strb	r3, [r7, #30]
 8003ffe:	e005      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004000:	40021000 	.word	0x40021000
 8004004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7ffb      	ldrb	r3, [r7, #31]
 800400a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004012:	4b9c      	ldr	r3, [pc, #624]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	4a9b      	ldr	r2, [pc, #620]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800402a:	4b96      	ldr	r3, [pc, #600]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f023 0203 	bic.w	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	4992      	ldr	r1, [pc, #584]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800404c:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 020c 	bic.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	498a      	ldr	r1, [pc, #552]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800406e:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	4981      	ldr	r1, [pc, #516]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004090:	4b7c      	ldr	r3, [pc, #496]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4979      	ldr	r1, [pc, #484]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040b2:	4b74      	ldr	r3, [pc, #464]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	4970      	ldr	r1, [pc, #448]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040d4:	4b6b      	ldr	r3, [pc, #428]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	4968      	ldr	r1, [pc, #416]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	495f      	ldr	r1, [pc, #380]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004118:	4b5a      	ldr	r3, [pc, #360]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004126:	4957      	ldr	r1, [pc, #348]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800413a:	4b52      	ldr	r3, [pc, #328]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004148:	494e      	ldr	r1, [pc, #312]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d031      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004164:	d00e      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800416a:	d814      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004174:	d10f      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004176:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4a42      	ldr	r2, [pc, #264]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800417c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004180:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004182:	e00c      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f97c 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	77fb      	strb	r3, [r7, #31]
        break;
 800419a:	e000      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800419c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b2:	4934      	ldr	r1, [pc, #208]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
 80041be:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041cc:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	492a      	ldr	r1, [pc, #168]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ee:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	4921      	ldr	r1, [pc, #132]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	4919      	ldr	r1, [pc, #100]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004238:	f023 0203 	bic.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	4910      	ldr	r1, [pc, #64]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d02b      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	4908      	ldr	r1, [pc, #32]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004272:	d109      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a02      	ldr	r2, [pc, #8]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427e:	60d3      	str	r3, [r2, #12]
 8004280:	e014      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f8f5 	bl	8004488 <RCCEx_PLLSAI1_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80042a2:	7ffb      	ldrb	r3, [r7, #31]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
 80042aa:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d04a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c0:	d108      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80042c2:	4b70      	ldr	r3, [pc, #448]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c8:	4a6e      	ldr	r2, [pc, #440]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042d2:	e012      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80042d4:	4b6b      	ldr	r3, [pc, #428]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e2:	4968      	ldr	r1, [pc, #416]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ea:	4b66      	ldr	r3, [pc, #408]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f0:	4a64      	ldr	r2, [pc, #400]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004302:	d10d      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f8bc 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004314:	7ffb      	ldrb	r3, [r7, #31]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d019      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800431a:	7ffb      	ldrb	r3, [r7, #31]
 800431c:	77bb      	strb	r3, [r7, #30]
 800431e:	e016      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004328:	d106      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432a:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4a55      	ldr	r2, [pc, #340]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004334:	60d3      	str	r3, [r2, #12]
 8004336:	e00a      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004340:	d105      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004342:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	4a4f      	ldr	r2, [pc, #316]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d028      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800435a:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004368:	4946      	ldr	r1, [pc, #280]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004378:	d106      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4a41      	ldr	r2, [pc, #260]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004384:	60d3      	str	r3, [r2, #12]
 8004386:	e011      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004390:	d10c      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	2101      	movs	r1, #1
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f875 	bl	8004488 <RCCEx_PLLSAI1_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80043a2:	7ffb      	ldrb	r3, [r7, #31]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80043a8:	7ffb      	ldrb	r3, [r7, #31]
 80043aa:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01e      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c8:	492e      	ldr	r1, [pc, #184]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043da:	d10c      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	2102      	movs	r1, #2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f850 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80043ec:	7ffb      	ldrb	r3, [r7, #31]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004408:	f023 0204 	bic.w	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	491c      	ldr	r1, [pc, #112]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800442c:	f023 0218 	bic.w	r2, r3, #24
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	4913      	ldr	r1, [pc, #76]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800444c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800445a:	490a      	ldr	r1, [pc, #40]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446c:	d105      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004478:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800447a:	7fbb      	ldrb	r3, [r7, #30]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000

08004488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d018      	beq.n	80044d0 <RCCEx_PLLSAI1_Config+0x48>
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d81f      	bhi.n	80044e2 <RCCEx_PLLSAI1_Config+0x5a>
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d002      	beq.n	80044ac <RCCEx_PLLSAI1_Config+0x24>
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d009      	beq.n	80044be <RCCEx_PLLSAI1_Config+0x36>
 80044aa:	e01a      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ac:	4b65      	ldr	r3, [pc, #404]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d117      	bne.n	80044e8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044bc:	e014      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d110      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ce:	e00d      	b.n	80044ec <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80044d0:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e0:	e006      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
      break;
 80044e6:	e004      	b.n	80044f2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80044f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 809f 	bne.w	8004638 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044fa:	4b52      	ldr	r3, [pc, #328]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a51      	ldr	r2, [pc, #324]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004500:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004506:	f7fc fff5 	bl	80014f4 <HAL_GetTick>
 800450a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800450c:	e00f      	b.n	800452e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800450e:	f7fc fff1 	bl	80014f4 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d908      	bls.n	800452e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800451c:	4b49      	ldr	r3, [pc, #292]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800452c:	e006      	b.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800452e:	4b45      	ldr	r3, [pc, #276]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e9      	bne.n	800450e <RCCEx_PLLSAI1_Config+0x86>
 800453a:	e000      	b.n	800453e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800453c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d179      	bne.n	8004638 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800454a:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	0211      	lsls	r1, r2, #8
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68d2      	ldr	r2, [r2, #12]
 800455c:	06d2      	lsls	r2, r2, #27
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6852      	ldr	r2, [r2, #4]
 8004564:	3a01      	subs	r2, #1
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	4934      	ldr	r1, [pc, #208]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	610b      	str	r3, [r1, #16]
 8004576:	e033      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d118      	bne.n	80045b0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	4b32      	ldr	r3, [pc, #200]	; (800464c <RCCEx_PLLSAI1_Config+0x1c4>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6892      	ldr	r2, [r2, #8]
 800458a:	0211      	lsls	r1, r2, #8
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6912      	ldr	r2, [r2, #16]
 8004590:	0852      	lsrs	r2, r2, #1
 8004592:	3a01      	subs	r2, #1
 8004594:	0552      	lsls	r2, r2, #21
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6852      	ldr	r2, [r2, #4]
 800459c:	3a01      	subs	r2, #1
 800459e:	0112      	lsls	r2, r2, #4
 80045a0:	4311      	orrs	r1, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	4926      	ldr	r1, [pc, #152]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
 80045ae:	e017      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b0:	4b24      	ldr	r3, [pc, #144]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	4b26      	ldr	r3, [pc, #152]	; (8004650 <RCCEx_PLLSAI1_Config+0x1c8>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	0211      	lsls	r1, r2, #8
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6952      	ldr	r2, [r2, #20]
 80045c2:	0852      	lsrs	r2, r2, #1
 80045c4:	3a01      	subs	r2, #1
 80045c6:	0652      	lsls	r2, r2, #25
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6852      	ldr	r2, [r2, #4]
 80045ce:	3a01      	subs	r2, #1
 80045d0:	0112      	lsls	r2, r2, #4
 80045d2:	4311      	orrs	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	491a      	ldr	r1, [pc, #104]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045e0:	4b18      	ldr	r3, [pc, #96]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a17      	ldr	r2, [pc, #92]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fc ff82 	bl	80014f4 <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f2:	e00f      	b.n	8004614 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f4:	f7fc ff7e 	bl	80014f4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d908      	bls.n	8004614 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004612:	e006      	b.n	8004622 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0e9      	beq.n	80045f4 <RCCEx_PLLSAI1_Config+0x16c>
 8004620:	e000      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004622:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	4904      	ldr	r1, [pc, #16]	; (8004644 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	07ff800c 	.word	0x07ff800c
 800464c:	ff9f800c 	.word	0xff9f800c
 8004650:	f9ff800c 	.word	0xf9ff800c

08004654 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d018      	beq.n	800469c <RCCEx_PLLSAI2_Config+0x48>
 800466a:	2b03      	cmp	r3, #3
 800466c:	d81f      	bhi.n	80046ae <RCCEx_PLLSAI2_Config+0x5a>
 800466e:	2b01      	cmp	r3, #1
 8004670:	d002      	beq.n	8004678 <RCCEx_PLLSAI2_Config+0x24>
 8004672:	2b02      	cmp	r3, #2
 8004674:	d009      	beq.n	800468a <RCCEx_PLLSAI2_Config+0x36>
 8004676:	e01a      	b.n	80046ae <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004678:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d117      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004688:	e014      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800468a:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004692:	2b00      	cmp	r3, #0
 8004694:	d110      	bne.n	80046b8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469a:	e00d      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800469c:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ac:	e006      	b.n	80046bc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
      break;
 80046b2:	e004      	b.n	80046be <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80046b4:	bf00      	nop
 80046b6:	e002      	b.n	80046be <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80046b8:	bf00      	nop
 80046ba:	e000      	b.n	80046be <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80046bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d169      	bne.n	8004798 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046c4:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a36      	ldr	r2, [pc, #216]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d0:	f7fc ff10 	bl	80014f4 <HAL_GetTick>
 80046d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046d6:	e00f      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d8:	f7fc ff0c 	bl	80014f4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d908      	bls.n	80046f8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e6:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046f6:	e006      	b.n	8004706 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f8:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e9      	bne.n	80046d8 <RCCEx_PLLSAI2_Config+0x84>
 8004704:	e000      	b.n	8004708 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004706:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d144      	bne.n	8004798 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d115      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004714:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <RCCEx_PLLSAI2_Config+0x154>)
 800471a:	4013      	ands	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	0211      	lsls	r1, r2, #8
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	06d2      	lsls	r2, r2, #27
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6852      	ldr	r2, [r2, #4]
 800472e:	3a01      	subs	r2, #1
 8004730:	0112      	lsls	r2, r2, #4
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	491a      	ldr	r1, [pc, #104]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 800473c:	4313      	orrs	r3, r2
 800473e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fc fed2 	bl	80014f4 <HAL_GetTick>
 8004750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004752:	e00f      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004754:	f7fc fece 	bl	80014f4 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d908      	bls.n	8004774 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004772:	e006      	b.n	8004782 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0e9      	beq.n	8004754 <RCCEx_PLLSAI2_Config+0x100>
 8004780:	e000      	b.n	8004784 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004782:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	4904      	ldr	r1, [pc, #16]	; (80047a4 <RCCEx_PLLSAI2_Config+0x150>)
 8004794:	4313      	orrs	r3, r2
 8004796:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	07ff800c 	.word	0x07ff800c

080047ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d066      	beq.n	800488c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fbdc 	bl	8000f90 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d045      	beq.n	800487a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ee:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_RTC_Init+0xec>)
 80047f0:	22ca      	movs	r2, #202	; 0xca
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24
 80047f4:	4b28      	ldr	r3, [pc, #160]	; (8004898 <HAL_RTC_Init+0xec>)
 80047f6:	2253      	movs	r2, #83	; 0x53
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f872 	bl	80048e4 <RTC_EnterInitMode>
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d121      	bne.n	800484e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800480a:	4b23      	ldr	r3, [pc, #140]	; (8004898 <HAL_RTC_Init+0xec>)
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	4a22      	ldr	r2, [pc, #136]	; (8004898 <HAL_RTC_Init+0xec>)
 8004810:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004818:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800481a:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <HAL_RTC_Init+0xec>)
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	4319      	orrs	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	430b      	orrs	r3, r1
 800482e:	491a      	ldr	r1, [pc, #104]	; (8004898 <HAL_RTC_Init+0xec>)
 8004830:	4313      	orrs	r3, r2
 8004832:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	4916      	ldr	r1, [pc, #88]	; (8004898 <HAL_RTC_Init+0xec>)
 8004840:	4313      	orrs	r3, r2
 8004842:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f881 	bl	800494c <RTC_ExitInitMode>
 800484a:	4603      	mov	r3, r0
 800484c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10e      	bne.n	8004872 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004854:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RTC_Init+0xec>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a19      	ldr	r1, [r3, #32]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4319      	orrs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	430b      	orrs	r3, r1
 800486c:	490a      	ldr	r1, [pc, #40]	; (8004898 <HAL_RTC_Init+0xec>)
 800486e:	4313      	orrs	r3, r2
 8004870:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RTC_Init+0xec>)
 8004874:	22ff      	movs	r2, #255	; 0xff
 8004876:	625a      	str	r2, [r3, #36]	; 0x24
 8004878:	e001      	b.n	800487e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d103      	bne.n	800488c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40002800 	.word	0x40002800

0800489c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <HAL_RTC_WaitForSynchro+0x40>)
 80048a6:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <HAL_RTC_WaitForSynchro+0x44>)
 80048a8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80048aa:	f7fc fe23 	bl	80014f4 <HAL_GetTick>
 80048ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80048b0:	e009      	b.n	80048c6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048b2:	f7fc fe1f 	bl	80014f4 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c0:	d901      	bls.n	80048c6 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e006      	b.n	80048d4 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_RTC_WaitForSynchro+0x40>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ef      	beq.n	80048b2 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40002800 	.word	0x40002800
 80048e0:	0001005c 	.word	0x0001005c

080048e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80048f0:	4b15      	ldr	r3, [pc, #84]	; (8004948 <RTC_EnterInitMode+0x64>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d120      	bne.n	800493e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <RTC_EnterInitMode+0x64>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <RTC_EnterInitMode+0x64>)
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004908:	f7fc fdf4 	bl	80014f4 <HAL_GetTick>
 800490c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800490e:	e00d      	b.n	800492c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004910:	f7fc fdf0 	bl	80014f4 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800491e:	d905      	bls.n	800492c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2203      	movs	r2, #3
 8004928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <RTC_EnterInitMode+0x64>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <RTC_EnterInitMode+0x5a>
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b03      	cmp	r3, #3
 800493c:	d1e8      	bne.n	8004910 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40002800 	.word	0x40002800

0800494c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <RTC_ExitInitMode+0x78>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <RTC_ExitInitMode+0x78>)
 800495e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004962:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <RTC_ExitInitMode+0x78>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10c      	bne.n	800498a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff93 	bl	800489c <HAL_RTC_WaitForSynchro>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01e      	beq.n	80049ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2203      	movs	r2, #3
 8004980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	e017      	b.n	80049ba <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <RTC_ExitInitMode+0x78>)
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <RTC_ExitInitMode+0x78>)
 8004990:	f023 0320 	bic.w	r3, r3, #32
 8004994:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff ff80 	bl	800489c <HAL_RTC_WaitForSynchro>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2203      	movs	r2, #3
 80049a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <RTC_ExitInitMode+0x78>)
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <RTC_ExitInitMode+0x78>)
 80049b4:	f043 0320 	orr.w	r3, r3, #32
 80049b8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40002800 	.word	0x40002800

080049c8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	490f      	ldr	r1, [pc, #60]	; (8004a18 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	490c      	ldr	r1, [pc, #48]	; (8004a1c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6919      	ldr	r1, [r3, #16]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	430b      	orrs	r3, r1
 8004a02:	4906      	ldr	r1, [pc, #24]	; (8004a1c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40002800 	.word	0x40002800
 8004a1c:	40003400 	.word	0x40003400

08004a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e042      	b.n	8004ab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fc fa43 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2224      	movs	r2, #36	; 0x24
 8004a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f82c 	bl	8004ac0 <UART_SetConfig>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e022      	b.n	8004ab8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fb20 	bl	80050c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fba7 	bl	8005204 <UART_CheckIdleState>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b08c      	sub	sp, #48	; 0x30
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4baa      	ldr	r3, [pc, #680]	; (8004d98 <UART_SetConfig+0x2d8>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a9f      	ldr	r2, [pc, #636]	; (8004d9c <UART_SetConfig+0x2dc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f023 010f 	bic.w	r1, r3, #15
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a90      	ldr	r2, [pc, #576]	; (8004da0 <UART_SetConfig+0x2e0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d125      	bne.n	8004bb0 <UART_SetConfig+0xf0>
 8004b64:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <UART_SetConfig+0x2e4>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d81a      	bhi.n	8004ba8 <UART_SetConfig+0xe8>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <UART_SetConfig+0xb8>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba1 	.word	0x08004ba1
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8e:	e116      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e112      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e10e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e10a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e106      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7c      	ldr	r2, [pc, #496]	; (8004da8 <UART_SetConfig+0x2e8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d138      	bne.n	8004c2c <UART_SetConfig+0x16c>
 8004bba:	4b7a      	ldr	r3, [pc, #488]	; (8004da4 <UART_SetConfig+0x2e4>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d82d      	bhi.n	8004c24 <UART_SetConfig+0x164>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x110>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c25 	.word	0x08004c25
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c0d 	.word	0x08004c0d
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0a:	e0d8      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c12:	e0d4      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1a:	e0d0      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c22:	e0cc      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2a:	e0c8      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5e      	ldr	r2, [pc, #376]	; (8004dac <UART_SetConfig+0x2ec>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d125      	bne.n	8004c82 <UART_SetConfig+0x1c2>
 8004c36:	4b5b      	ldr	r3, [pc, #364]	; (8004da4 <UART_SetConfig+0x2e4>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c40:	2b30      	cmp	r3, #48	; 0x30
 8004c42:	d016      	beq.n	8004c72 <UART_SetConfig+0x1b2>
 8004c44:	2b30      	cmp	r3, #48	; 0x30
 8004c46:	d818      	bhi.n	8004c7a <UART_SetConfig+0x1ba>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d00a      	beq.n	8004c62 <UART_SetConfig+0x1a2>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d814      	bhi.n	8004c7a <UART_SetConfig+0x1ba>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <UART_SetConfig+0x19a>
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d008      	beq.n	8004c6a <UART_SetConfig+0x1aa>
 8004c58:	e00f      	b.n	8004c7a <UART_SetConfig+0x1ba>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c60:	e0ad      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c62:	2302      	movs	r3, #2
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c68:	e0a9      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c70:	e0a5      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c72:	2308      	movs	r3, #8
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c78:	e0a1      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c80:	e09d      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a4a      	ldr	r2, [pc, #296]	; (8004db0 <UART_SetConfig+0x2f0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d125      	bne.n	8004cd8 <UART_SetConfig+0x218>
 8004c8c:	4b45      	ldr	r3, [pc, #276]	; (8004da4 <UART_SetConfig+0x2e4>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c96:	2bc0      	cmp	r3, #192	; 0xc0
 8004c98:	d016      	beq.n	8004cc8 <UART_SetConfig+0x208>
 8004c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c9c:	d818      	bhi.n	8004cd0 <UART_SetConfig+0x210>
 8004c9e:	2b80      	cmp	r3, #128	; 0x80
 8004ca0:	d00a      	beq.n	8004cb8 <UART_SetConfig+0x1f8>
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d814      	bhi.n	8004cd0 <UART_SetConfig+0x210>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <UART_SetConfig+0x1f0>
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d008      	beq.n	8004cc0 <UART_SetConfig+0x200>
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x210>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e082      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e07e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc6:	e07a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cce:	e076      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd6:	e072      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a35      	ldr	r2, [pc, #212]	; (8004db4 <UART_SetConfig+0x2f4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d12a      	bne.n	8004d38 <UART_SetConfig+0x278>
 8004ce2:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <UART_SetConfig+0x2e4>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf0:	d01a      	beq.n	8004d28 <UART_SetConfig+0x268>
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf6:	d81b      	bhi.n	8004d30 <UART_SetConfig+0x270>
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfc:	d00c      	beq.n	8004d18 <UART_SetConfig+0x258>
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d02:	d815      	bhi.n	8004d30 <UART_SetConfig+0x270>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <UART_SetConfig+0x250>
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0c:	d008      	beq.n	8004d20 <UART_SetConfig+0x260>
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x270>
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d16:	e052      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e04e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d26:	e04a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2e:	e046      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d36:	e042      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <UART_SetConfig+0x2dc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d13a      	bne.n	8004db8 <UART_SetConfig+0x2f8>
 8004d42:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <UART_SetConfig+0x2e4>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d50:	d01a      	beq.n	8004d88 <UART_SetConfig+0x2c8>
 8004d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d56:	d81b      	bhi.n	8004d90 <UART_SetConfig+0x2d0>
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5c:	d00c      	beq.n	8004d78 <UART_SetConfig+0x2b8>
 8004d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d62:	d815      	bhi.n	8004d90 <UART_SetConfig+0x2d0>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <UART_SetConfig+0x2b0>
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6c:	d008      	beq.n	8004d80 <UART_SetConfig+0x2c0>
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x2d0>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d76:	e022      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7e:	e01e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d86:	e01a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8e:	e016      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e012      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d98:	cfff69f3 	.word	0xcfff69f3
 8004d9c:	40008000 	.word	0x40008000
 8004da0:	40013800 	.word	0x40013800
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40004400 	.word	0x40004400
 8004dac:	40004800 	.word	0x40004800
 8004db0:	40004c00 	.word	0x40004c00
 8004db4:	40005000 	.word	0x40005000
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4ab0      	ldr	r2, [pc, #704]	; (8005084 <UART_SetConfig+0x5c4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	f040 809b 	bne.w	8004f00 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d827      	bhi.n	8004e22 <UART_SetConfig+0x362>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0x318>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e23 	.word	0x08004e23
 8004df8:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fe fec6 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004e00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e02:	e014      	b.n	8004e2e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7fe fed6 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e0a:	e010      	b.n	8004e2e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0c:	4b9e      	ldr	r3, [pc, #632]	; (8005088 <UART_SetConfig+0x5c8>)
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e10:	e00d      	b.n	8004e2e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e12:	f7fe fe09 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e18:	e009      	b.n	8004e2e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e20:	e005      	b.n	8004e2e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8130 	beq.w	8005096 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	4a94      	ldr	r2, [pc, #592]	; (800508c <UART_SetConfig+0x5cc>)
 8004e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d305      	bcc.n	8004e66 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d903      	bls.n	8004e6e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e6c:	e113      	b.n	8005096 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	2200      	movs	r2, #0
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	60fa      	str	r2, [r7, #12]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	4a84      	ldr	r2, [pc, #528]	; (800508c <UART_SetConfig+0x5cc>)
 8004e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2200      	movs	r2, #0
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e90:	f7fb f9d0 	bl	8000234 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	020b      	lsls	r3, r1, #8
 8004ea6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eaa:	0202      	lsls	r2, r0, #8
 8004eac:	6979      	ldr	r1, [r7, #20]
 8004eae:	6849      	ldr	r1, [r1, #4]
 8004eb0:	0849      	lsrs	r1, r1, #1
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	eb12 0804 	adds.w	r8, r2, r4
 8004ebc:	eb43 0905 	adc.w	r9, r3, r5
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	469a      	mov	sl, r3
 8004ec8:	4693      	mov	fp, r2
 8004eca:	4652      	mov	r2, sl
 8004ecc:	465b      	mov	r3, fp
 8004ece:	4640      	mov	r0, r8
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	f7fb f9af 	bl	8000234 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4613      	mov	r3, r2
 8004edc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee4:	d308      	bcc.n	8004ef8 <UART_SetConfig+0x438>
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eec:	d204      	bcs.n	8004ef8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a3a      	ldr	r2, [r7, #32]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	e0ce      	b.n	8005096 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004efe:	e0ca      	b.n	8005096 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d166      	bne.n	8004fd8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d827      	bhi.n	8004f62 <UART_SetConfig+0x4a2>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x458>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f53 	.word	0x08004f53
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fe fe26 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f42:	e014      	b.n	8004f6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7fe fe36 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f4a:	e010      	b.n	8004f6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b4e      	ldr	r3, [pc, #312]	; (8005088 <UART_SetConfig+0x5c8>)
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f50:	e00d      	b.n	8004f6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fe fd69 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f58:	e009      	b.n	8004f6e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f60:	e005      	b.n	8004f6e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8090 	beq.w	8005096 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	4a44      	ldr	r2, [pc, #272]	; (800508c <UART_SetConfig+0x5cc>)
 8004f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f88:	005a      	lsls	r2, r3, #1
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	441a      	add	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d916      	bls.n	8004fd0 <UART_SetConfig+0x510>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa8:	d212      	bcs.n	8004fd0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f023 030f 	bic.w	r3, r3, #15
 8004fb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	8bfb      	ldrh	r3, [r7, #30]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	8bfa      	ldrh	r2, [r7, #30]
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	e062      	b.n	8005096 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fd6:	e05e      	b.n	8005096 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d828      	bhi.n	8005032 <UART_SetConfig+0x572>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x528>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	08005033 	.word	0x08005033
 8004ff8:	08005023 	.word	0x08005023
 8004ffc:	08005033 	.word	0x08005033
 8005000:	08005033 	.word	0x08005033
 8005004:	08005033 	.word	0x08005033
 8005008:	0800502b 	.word	0x0800502b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800500c:	f7fe fdbe 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005012:	e014      	b.n	800503e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005014:	f7fe fdce 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800501a:	e010      	b.n	800503e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <UART_SetConfig+0x5c8>)
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005020:	e00d      	b.n	800503e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005022:	f7fe fd01 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005028:	e009      	b.n	800503e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005030:	e005      	b.n	800503e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800503c:	bf00      	nop
    }

    if (pclk != 0U)
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d028      	beq.n	8005096 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	4a10      	ldr	r2, [pc, #64]	; (800508c <UART_SetConfig+0x5cc>)
 800504a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800504e:	461a      	mov	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	fbb3 f2f2 	udiv	r2, r3, r2
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	441a      	add	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d910      	bls.n	8005090 <UART_SetConfig+0x5d0>
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d20c      	bcs.n	8005090 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	b29a      	uxth	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0x5d6>
 8005082:	bf00      	nop
 8005084:	40008000 	.word	0x40008000
 8005088:	00f42400 	.word	0x00f42400
 800508c:	08006a34 	.word	0x08006a34
      }
      else
      {
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2201      	movs	r2, #1
 800509a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80050b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3730      	adds	r7, #48	; 0x30
 80050ba:	46bd      	mov	sp, r7
 80050bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01a      	beq.n	80051d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051be:	d10a      	bne.n	80051d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]
  }
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b098      	sub	sp, #96	; 0x60
 8005208:	af02      	add	r7, sp, #8
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005214:	f7fc f96e 	bl	80014f4 <HAL_GetTick>
 8005218:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b08      	cmp	r3, #8
 8005226:	d12f      	bne.n	8005288 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005230:	2200      	movs	r2, #0
 8005232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f88e 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d022      	beq.n	8005288 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005256:	653b      	str	r3, [r7, #80]	; 0x50
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
 8005262:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e6      	bne.n	8005242 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e063      	b.n	8005350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d149      	bne.n	800532a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005296:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529e:	2200      	movs	r2, #0
 80052a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f857 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d03c      	beq.n	800532a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	623b      	str	r3, [r7, #32]
   return(result);
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
 80052d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e6      	bne.n	80052b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005302:	61fa      	str	r2, [r7, #28]
 8005304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	69b9      	ldr	r1, [r7, #24]
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	617b      	str	r3, [r7, #20]
   return(result);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e012      	b.n	8005350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3758      	adds	r7, #88	; 0x58
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005368:	e049      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d045      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fc f8bf 	bl	80014f4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <UART_WaitOnFlagUntilTimeout+0x30>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e048      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d031      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d110      	bne.n	80053ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2208      	movs	r2, #8
 80053ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f838 	bl	8005426 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2208      	movs	r2, #8
 80053ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e029      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d8:	d111      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f81e 	bl	8005426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e00f      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	429a      	cmp	r2, r3
 800541a:	d0a6      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005426:	b480      	push	{r7}
 8005428:	b095      	sub	sp, #84	; 0x54
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	643b      	str	r3, [r7, #64]	; 0x40
 800544e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e6      	bne.n	800542e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3308      	adds	r3, #8
 8005466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	64bb      	str	r3, [r7, #72]	; 0x48
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005484:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800548a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e3      	bne.n	8005460 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d118      	bne.n	80054d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 0310 	bic.w	r3, r3, #16
 80054b4:	647b      	str	r3, [r7, #68]	; 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6979      	ldr	r1, [r7, #20]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	613b      	str	r3, [r7, #16]
   return(result);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e6      	bne.n	80054a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80054e6:	bf00      	nop
 80054e8:	3754      	adds	r7, #84	; 0x54
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_UARTEx_DisableFifoMode+0x16>
 8005504:	2302      	movs	r3, #2
 8005506:	e027      	b.n	8005558 <HAL_UARTEx_DisableFifoMode+0x66>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e02d      	b.n	80055d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2224      	movs	r2, #36	; 0x24
 8005588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f84f 	bl	800565c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e02d      	b.n	8005654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f811 	bl	800565c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800567c:	e031      	b.n	80056e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800567e:	2308      	movs	r3, #8
 8005680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005682:	2308      	movs	r3, #8
 8005684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	0e5b      	lsrs	r3, r3, #25
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0f5b      	lsrs	r3, r3, #29
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	7b3a      	ldrb	r2, [r7, #12]
 80056aa:	4911      	ldr	r1, [pc, #68]	; (80056f0 <UARTEx_SetNbDataToProcess+0x94>)
 80056ac:	5c8a      	ldrb	r2, [r1, r2]
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056b2:	7b3a      	ldrb	r2, [r7, #12]
 80056b4:	490f      	ldr	r1, [pc, #60]	; (80056f4 <UARTEx_SetNbDataToProcess+0x98>)
 80056b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	7b7a      	ldrb	r2, [r7, #13]
 80056c8:	4909      	ldr	r1, [pc, #36]	; (80056f0 <UARTEx_SetNbDataToProcess+0x94>)
 80056ca:	5c8a      	ldrb	r2, [r1, r2]
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056d0:	7b7a      	ldrb	r2, [r7, #13]
 80056d2:	4908      	ldr	r1, [pc, #32]	; (80056f4 <UARTEx_SetNbDataToProcess+0x98>)
 80056d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	08006a4c 	.word	0x08006a4c
 80056f4:	08006a54 	.word	0x08006a54

080056f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b08b      	sub	sp, #44	; 0x2c
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	fa93 f3a3 	rbit	r3, r3
 8005712:	613b      	str	r3, [r7, #16]
  return result;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800571e:	2320      	movs	r3, #32
 8005720:	e003      	b.n	800572a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	fab3 f383 	clz	r3, r3
 8005728:	b2db      	uxtb	r3, r3
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	2103      	movs	r1, #3
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	43db      	mvns	r3, r3
 8005734:	401a      	ands	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	61fb      	str	r3, [r7, #28]
  return result;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800574c:	2320      	movs	r3, #32
 800574e:	e003      	b.n	8005758 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	fab3 f383 	clz	r3, r3
 8005756:	b2db      	uxtb	r3, r3
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	fa01 f303 	lsl.w	r3, r1, r3
 8005760:	431a      	orrs	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	372c      	adds	r7, #44	; 0x2c
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b08b      	sub	sp, #44	; 0x2c
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	fa93 f3a3 	rbit	r3, r3
 80057bc:	613b      	str	r3, [r7, #16]
  return result;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80057c8:	2320      	movs	r3, #32
 80057ca:	e003      	b.n	80057d4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	fab3 f383 	clz	r3, r3
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	2103      	movs	r1, #3
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	401a      	ands	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	fa93 f3a3 	rbit	r3, r3
 80057ea:	61fb      	str	r3, [r7, #28]
  return result;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80057f6:	2320      	movs	r3, #32
 80057f8:	e003      	b.n	8005802 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	fab3 f383 	clz	r3, r3
 8005800:	b2db      	uxtb	r3, r3
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	431a      	orrs	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005810:	bf00      	nop
 8005812:	372c      	adds	r7, #44	; 0x2c
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800581c:	b480      	push	{r7}
 800581e:	b08b      	sub	sp, #44	; 0x2c
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	613b      	str	r3, [r7, #16]
  return result;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005842:	2320      	movs	r3, #32
 8005844:	e003      	b.n	800584e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	fab3 f383 	clz	r3, r3
 800584c:	b2db      	uxtb	r3, r3
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2103      	movs	r1, #3
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	401a      	ands	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	fa93 f3a3 	rbit	r3, r3
 8005864:	61fb      	str	r3, [r7, #28]
  return result;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005870:	2320      	movs	r3, #32
 8005872:	e003      	b.n	800587c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	fab3 f383 	clz	r3, r3
 800587a:	b2db      	uxtb	r3, r3
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	60da      	str	r2, [r3, #12]
}
 800588a:	bf00      	nop
 800588c:	372c      	adds	r7, #44	; 0x2c
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005896:	b480      	push	{r7}
 8005898:	b08b      	sub	sp, #44	; 0x2c
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1a      	ldr	r2, [r3, #32]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	fa93 f3a3 	rbit	r3, r3
 80058b0:	613b      	str	r3, [r7, #16]
  return result;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80058bc:	2320      	movs	r3, #32
 80058be:	e003      	b.n	80058c8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	210f      	movs	r1, #15
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	fa93 f3a3 	rbit	r3, r3
 80058de:	61fb      	str	r3, [r7, #28]
  return result;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80058ea:	2320      	movs	r3, #32
 80058ec:	e003      	b.n	80058f6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	fab3 f383 	clz	r3, r3
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	431a      	orrs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005904:	bf00      	nop
 8005906:	372c      	adds	r7, #44	; 0x2c
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005910:	b480      	push	{r7}
 8005912:	b08b      	sub	sp, #44	; 0x2c
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	fa93 f3a3 	rbit	r3, r3
 800592c:	613b      	str	r3, [r7, #16]
  return result;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005938:	2320      	movs	r3, #32
 800593a:	e003      	b.n	8005944 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	210f      	movs	r1, #15
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	401a      	ands	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	fa93 f3a3 	rbit	r3, r3
 800595c:	61fb      	str	r3, [r7, #28]
  return result;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005968:	2320      	movs	r3, #32
 800596a:	e003      	b.n	8005974 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	431a      	orrs	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005982:	bf00      	nop
 8005984:	372c      	adds	r7, #44	; 0x2c
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b088      	sub	sp, #32
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	fa93 f3a3 	rbit	r3, r3
 80059a4:	60fb      	str	r3, [r7, #12]
  return result;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <LL_GPIO_Init+0x26>
    return 32U;
 80059b0:	2320      	movs	r3, #32
 80059b2:	e003      	b.n	80059bc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	fab3 f383 	clz	r3, r3
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80059be:	e047      	b.n	8005a50 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	2101      	movs	r1, #1
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	fa01 f303 	lsl.w	r3, r1, r3
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d039      	beq.n	8005a4a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d003      	beq.n	80059e6 <LL_GPIO_Init+0x58>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d10d      	bne.n	8005a02 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	461a      	mov	r2, r3
 80059ec:	69b9      	ldr	r1, [r7, #24]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fed7 	bl	80057a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	461a      	mov	r2, r3
 80059fa:	69b9      	ldr	r1, [r7, #24]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff feb8 	bl	8005772 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	461a      	mov	r2, r3
 8005a08:	69b9      	ldr	r1, [r7, #24]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ff06 	bl	800581c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d111      	bne.n	8005a3c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2bff      	cmp	r3, #255	; 0xff
 8005a1c:	d807      	bhi.n	8005a2e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	461a      	mov	r2, r3
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ff35 	bl	8005896 <LL_GPIO_SetAFPin_0_7>
 8005a2c:	e006      	b.n	8005a3c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	461a      	mov	r2, r3
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff ff6a 	bl	8005910 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	461a      	mov	r2, r3
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fe57 	bl	80056f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1b0      	bne.n	80059c0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a70:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	43db      	mvns	r3, r3
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	4013      	ands	r3, r2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	f107 0014 	add.w	r0, r7, #20
 8005aac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	b004      	add	sp, #16
 8005ade:	4770      	bx	lr

08005ae0 <std>:
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	6083      	str	r3, [r0, #8]
 8005ae8:	8181      	strh	r1, [r0, #12]
 8005aea:	4619      	mov	r1, r3
 8005aec:	6643      	str	r3, [r0, #100]	; 0x64
 8005aee:	81c2      	strh	r2, [r0, #14]
 8005af0:	2208      	movs	r2, #8
 8005af2:	6183      	str	r3, [r0, #24]
 8005af4:	e9c0 3300 	strd	r3, r3, [r0]
 8005af8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005afc:	305c      	adds	r0, #92	; 0x5c
 8005afe:	f000 f8f4 	bl	8005cea <memset>
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <std+0x38>)
 8005b04:	6224      	str	r4, [r4, #32]
 8005b06:	6263      	str	r3, [r4, #36]	; 0x24
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <std+0x3c>)
 8005b0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <std+0x40>)
 8005b0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <std+0x44>)
 8005b12:	6323      	str	r3, [r4, #48]	; 0x30
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	08005c65 	.word	0x08005c65
 8005b1c:	08005c87 	.word	0x08005c87
 8005b20:	08005cbf 	.word	0x08005cbf
 8005b24:	08005ce3 	.word	0x08005ce3

08005b28 <stdio_exit_handler>:
 8005b28:	4a02      	ldr	r2, [pc, #8]	; (8005b34 <stdio_exit_handler+0xc>)
 8005b2a:	4903      	ldr	r1, [pc, #12]	; (8005b38 <stdio_exit_handler+0x10>)
 8005b2c:	4803      	ldr	r0, [pc, #12]	; (8005b3c <stdio_exit_handler+0x14>)
 8005b2e:	f000 b869 	b.w	8005c04 <_fwalk_sglue>
 8005b32:	bf00      	nop
 8005b34:	20000020 	.word	0x20000020
 8005b38:	08006685 	.word	0x08006685
 8005b3c:	2000002c 	.word	0x2000002c

08005b40 <cleanup_stdio>:
 8005b40:	6841      	ldr	r1, [r0, #4]
 8005b42:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <cleanup_stdio+0x34>)
 8005b44:	4299      	cmp	r1, r3
 8005b46:	b510      	push	{r4, lr}
 8005b48:	4604      	mov	r4, r0
 8005b4a:	d001      	beq.n	8005b50 <cleanup_stdio+0x10>
 8005b4c:	f000 fd9a 	bl	8006684 <_fflush_r>
 8005b50:	68a1      	ldr	r1, [r4, #8]
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <cleanup_stdio+0x38>)
 8005b54:	4299      	cmp	r1, r3
 8005b56:	d002      	beq.n	8005b5e <cleanup_stdio+0x1e>
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fd93 	bl	8006684 <_fflush_r>
 8005b5e:	68e1      	ldr	r1, [r4, #12]
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <cleanup_stdio+0x3c>)
 8005b62:	4299      	cmp	r1, r3
 8005b64:	d004      	beq.n	8005b70 <cleanup_stdio+0x30>
 8005b66:	4620      	mov	r0, r4
 8005b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6c:	f000 bd8a 	b.w	8006684 <_fflush_r>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	bf00      	nop
 8005b74:	200004bc 	.word	0x200004bc
 8005b78:	20000524 	.word	0x20000524
 8005b7c:	2000058c 	.word	0x2000058c

08005b80 <global_stdio_init.part.0>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <global_stdio_init.part.0+0x30>)
 8005b84:	2104      	movs	r1, #4
 8005b86:	4c0b      	ldr	r4, [pc, #44]	; (8005bb4 <global_stdio_init.part.0+0x34>)
 8005b88:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <global_stdio_init.part.0+0x38>)
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f7ff ffa6 	bl	8005ae0 <std>
 8005b94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b98:	2201      	movs	r2, #1
 8005b9a:	2109      	movs	r1, #9
 8005b9c:	f7ff ffa0 	bl	8005ae0 <std>
 8005ba0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	2112      	movs	r1, #18
 8005ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bac:	f7ff bf98 	b.w	8005ae0 <std>
 8005bb0:	200005f4 	.word	0x200005f4
 8005bb4:	200004bc 	.word	0x200004bc
 8005bb8:	08005b29 	.word	0x08005b29

08005bbc <__sfp_lock_acquire>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <__sfp_lock_acquire+0x8>)
 8005bbe:	f000 b90d 	b.w	8005ddc <__retarget_lock_acquire_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	200005fd 	.word	0x200005fd

08005bc8 <__sfp_lock_release>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	; (8005bd0 <__sfp_lock_release+0x8>)
 8005bca:	f000 b908 	b.w	8005dde <__retarget_lock_release_recursive>
 8005bce:	bf00      	nop
 8005bd0:	200005fd 	.word	0x200005fd

08005bd4 <__sinit>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	f7ff fff0 	bl	8005bbc <__sfp_lock_acquire>
 8005bdc:	6a23      	ldr	r3, [r4, #32]
 8005bde:	b11b      	cbz	r3, 8005be8 <__sinit+0x14>
 8005be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be4:	f7ff bff0 	b.w	8005bc8 <__sfp_lock_release>
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <__sinit+0x28>)
 8005bea:	6223      	str	r3, [r4, #32]
 8005bec:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <__sinit+0x2c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f5      	bne.n	8005be0 <__sinit+0xc>
 8005bf4:	f7ff ffc4 	bl	8005b80 <global_stdio_init.part.0>
 8005bf8:	e7f2      	b.n	8005be0 <__sinit+0xc>
 8005bfa:	bf00      	nop
 8005bfc:	08005b41 	.word	0x08005b41
 8005c00:	200005f4 	.word	0x200005f4

08005c04 <_fwalk_sglue>:
 8005c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c08:	4607      	mov	r7, r0
 8005c0a:	4688      	mov	r8, r1
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	2600      	movs	r6, #0
 8005c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c14:	f1b9 0901 	subs.w	r9, r9, #1
 8005c18:	d505      	bpl.n	8005c26 <_fwalk_sglue+0x22>
 8005c1a:	6824      	ldr	r4, [r4, #0]
 8005c1c:	2c00      	cmp	r4, #0
 8005c1e:	d1f7      	bne.n	8005c10 <_fwalk_sglue+0xc>
 8005c20:	4630      	mov	r0, r6
 8005c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d907      	bls.n	8005c3c <_fwalk_sglue+0x38>
 8005c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c30:	3301      	adds	r3, #1
 8005c32:	d003      	beq.n	8005c3c <_fwalk_sglue+0x38>
 8005c34:	4629      	mov	r1, r5
 8005c36:	4638      	mov	r0, r7
 8005c38:	47c0      	blx	r8
 8005c3a:	4306      	orrs	r6, r0
 8005c3c:	3568      	adds	r5, #104	; 0x68
 8005c3e:	e7e9      	b.n	8005c14 <_fwalk_sglue+0x10>

08005c40 <iprintf>:
 8005c40:	b40f      	push	{r0, r1, r2, r3}
 8005c42:	b507      	push	{r0, r1, r2, lr}
 8005c44:	4906      	ldr	r1, [pc, #24]	; (8005c60 <iprintf+0x20>)
 8005c46:	ab04      	add	r3, sp, #16
 8005c48:	6808      	ldr	r0, [r1, #0]
 8005c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c4e:	6881      	ldr	r1, [r0, #8]
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	f000 f9e7 	bl	8006024 <_vfiprintf_r>
 8005c56:	b003      	add	sp, #12
 8005c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c5c:	b004      	add	sp, #16
 8005c5e:	4770      	bx	lr
 8005c60:	20000078 	.word	0x20000078

08005c64 <__sread>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	460c      	mov	r4, r1
 8005c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6c:	f000 f868 	bl	8005d40 <_read_r>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	bfab      	itete	ge
 8005c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c76:	89a3      	ldrhlt	r3, [r4, #12]
 8005c78:	181b      	addge	r3, r3, r0
 8005c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c7e:	bfac      	ite	ge
 8005c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c82:	81a3      	strhlt	r3, [r4, #12]
 8005c84:	bd10      	pop	{r4, pc}

08005c86 <__swrite>:
 8005c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	898b      	ldrh	r3, [r1, #12]
 8005c8e:	4605      	mov	r5, r0
 8005c90:	460c      	mov	r4, r1
 8005c92:	05db      	lsls	r3, r3, #23
 8005c94:	4616      	mov	r6, r2
 8005c96:	d505      	bpl.n	8005ca4 <__swrite+0x1e>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca0:	f000 f83c 	bl	8005d1c <_lseek_r>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	4632      	mov	r2, r6
 8005ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cac:	4628      	mov	r0, r5
 8005cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cba:	f000 b853 	b.w	8005d64 <_write_r>

08005cbe <__sseek>:
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc6:	f000 f829 	bl	8005d1c <_lseek_r>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	bf15      	itete	ne
 8005cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cda:	81a3      	strheq	r3, [r4, #12]
 8005cdc:	bf18      	it	ne
 8005cde:	81a3      	strhne	r3, [r4, #12]
 8005ce0:	bd10      	pop	{r4, pc}

08005ce2 <__sclose>:
 8005ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce6:	f000 b809 	b.w	8005cfc <_close_r>

08005cea <memset>:
 8005cea:	4402      	add	r2, r0
 8005cec:	4603      	mov	r3, r0
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d100      	bne.n	8005cf4 <memset+0xa>
 8005cf2:	4770      	bx	lr
 8005cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf8:	e7f9      	b.n	8005cee <memset+0x4>
	...

08005cfc <_close_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4d05      	ldr	r5, [pc, #20]	; (8005d18 <_close_r+0x1c>)
 8005d02:	4604      	mov	r4, r0
 8005d04:	4608      	mov	r0, r1
 8005d06:	602b      	str	r3, [r5, #0]
 8005d08:	f7fb fa36 	bl	8001178 <_close>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d102      	bne.n	8005d16 <_close_r+0x1a>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	b103      	cbz	r3, 8005d16 <_close_r+0x1a>
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	200005f8 	.word	0x200005f8

08005d1c <_lseek_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4d06      	ldr	r5, [pc, #24]	; (8005d3c <_lseek_r+0x20>)
 8005d22:	4608      	mov	r0, r1
 8005d24:	4611      	mov	r1, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	602a      	str	r2, [r5, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fb fa4b 	bl	80011c6 <_lseek>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_lseek_r+0x1e>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_lseek_r+0x1e>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	200005f8 	.word	0x200005f8

08005d40 <_read_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4604      	mov	r4, r0
 8005d44:	4d06      	ldr	r5, [pc, #24]	; (8005d60 <_read_r+0x20>)
 8005d46:	4608      	mov	r0, r1
 8005d48:	4611      	mov	r1, r2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	602a      	str	r2, [r5, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f7fb f9f5 	bl	800113e <_read>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_read_r+0x1e>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_read_r+0x1e>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	200005f8 	.word	0x200005f8

08005d64 <_write_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4604      	mov	r4, r0
 8005d68:	4d06      	ldr	r5, [pc, #24]	; (8005d84 <_write_r+0x20>)
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	2200      	movs	r2, #0
 8005d70:	602a      	str	r2, [r5, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f7fa ff7c 	bl	8000c70 <_write>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_write_r+0x1e>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_write_r+0x1e>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	200005f8 	.word	0x200005f8

08005d88 <__errno>:
 8005d88:	4b01      	ldr	r3, [pc, #4]	; (8005d90 <__errno+0x8>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000078 	.word	0x20000078

08005d94 <__libc_init_array>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	4d0d      	ldr	r5, [pc, #52]	; (8005dcc <__libc_init_array+0x38>)
 8005d98:	2600      	movs	r6, #0
 8005d9a:	4c0d      	ldr	r4, [pc, #52]	; (8005dd0 <__libc_init_array+0x3c>)
 8005d9c:	1b64      	subs	r4, r4, r5
 8005d9e:	10a4      	asrs	r4, r4, #2
 8005da0:	42a6      	cmp	r6, r4
 8005da2:	d109      	bne.n	8005db8 <__libc_init_array+0x24>
 8005da4:	4d0b      	ldr	r5, [pc, #44]	; (8005dd4 <__libc_init_array+0x40>)
 8005da6:	2600      	movs	r6, #0
 8005da8:	4c0b      	ldr	r4, [pc, #44]	; (8005dd8 <__libc_init_array+0x44>)
 8005daa:	f000 fdcb 	bl	8006944 <_init>
 8005dae:	1b64      	subs	r4, r4, r5
 8005db0:	10a4      	asrs	r4, r4, #2
 8005db2:	42a6      	cmp	r6, r4
 8005db4:	d105      	bne.n	8005dc2 <__libc_init_array+0x2e>
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
 8005db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	4798      	blx	r3
 8005dc0:	e7ee      	b.n	8005da0 <__libc_init_array+0xc>
 8005dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc6:	3601      	adds	r6, #1
 8005dc8:	4798      	blx	r3
 8005dca:	e7f2      	b.n	8005db2 <__libc_init_array+0x1e>
 8005dcc:	08006a98 	.word	0x08006a98
 8005dd0:	08006a98 	.word	0x08006a98
 8005dd4:	08006a98 	.word	0x08006a98
 8005dd8:	08006a9c 	.word	0x08006a9c

08005ddc <__retarget_lock_acquire_recursive>:
 8005ddc:	4770      	bx	lr

08005dde <__retarget_lock_release_recursive>:
 8005dde:	4770      	bx	lr

08005de0 <_free_r>:
 8005de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d043      	beq.n	8005e6e <_free_r+0x8e>
 8005de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dea:	1f0c      	subs	r4, r1, #4
 8005dec:	9001      	str	r0, [sp, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bfb8      	it	lt
 8005df2:	18e4      	addlt	r4, r4, r3
 8005df4:	f000 f8e0 	bl	8005fb8 <__malloc_lock>
 8005df8:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <_free_r+0x94>)
 8005dfa:	9801      	ldr	r0, [sp, #4]
 8005dfc:	6813      	ldr	r3, [r2, #0]
 8005dfe:	b933      	cbnz	r3, 8005e0e <_free_r+0x2e>
 8005e00:	6063      	str	r3, [r4, #4]
 8005e02:	6014      	str	r4, [r2, #0]
 8005e04:	b003      	add	sp, #12
 8005e06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e0a:	f000 b8db 	b.w	8005fc4 <__malloc_unlock>
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	d908      	bls.n	8005e24 <_free_r+0x44>
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	1961      	adds	r1, r4, r5
 8005e16:	428b      	cmp	r3, r1
 8005e18:	bf01      	itttt	eq
 8005e1a:	6819      	ldreq	r1, [r3, #0]
 8005e1c:	685b      	ldreq	r3, [r3, #4]
 8005e1e:	1949      	addeq	r1, r1, r5
 8005e20:	6021      	streq	r1, [r4, #0]
 8005e22:	e7ed      	b.n	8005e00 <_free_r+0x20>
 8005e24:	461a      	mov	r2, r3
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	b10b      	cbz	r3, 8005e2e <_free_r+0x4e>
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	d9fa      	bls.n	8005e24 <_free_r+0x44>
 8005e2e:	6811      	ldr	r1, [r2, #0]
 8005e30:	1855      	adds	r5, r2, r1
 8005e32:	42a5      	cmp	r5, r4
 8005e34:	d10b      	bne.n	8005e4e <_free_r+0x6e>
 8005e36:	6824      	ldr	r4, [r4, #0]
 8005e38:	4421      	add	r1, r4
 8005e3a:	1854      	adds	r4, r2, r1
 8005e3c:	6011      	str	r1, [r2, #0]
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	d1e0      	bne.n	8005e04 <_free_r+0x24>
 8005e42:	681c      	ldr	r4, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	440c      	add	r4, r1
 8005e48:	6053      	str	r3, [r2, #4]
 8005e4a:	6014      	str	r4, [r2, #0]
 8005e4c:	e7da      	b.n	8005e04 <_free_r+0x24>
 8005e4e:	d902      	bls.n	8005e56 <_free_r+0x76>
 8005e50:	230c      	movs	r3, #12
 8005e52:	6003      	str	r3, [r0, #0]
 8005e54:	e7d6      	b.n	8005e04 <_free_r+0x24>
 8005e56:	6825      	ldr	r5, [r4, #0]
 8005e58:	1961      	adds	r1, r4, r5
 8005e5a:	428b      	cmp	r3, r1
 8005e5c:	bf02      	ittt	eq
 8005e5e:	6819      	ldreq	r1, [r3, #0]
 8005e60:	685b      	ldreq	r3, [r3, #4]
 8005e62:	1949      	addeq	r1, r1, r5
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	bf08      	it	eq
 8005e68:	6021      	streq	r1, [r4, #0]
 8005e6a:	6054      	str	r4, [r2, #4]
 8005e6c:	e7ca      	b.n	8005e04 <_free_r+0x24>
 8005e6e:	b003      	add	sp, #12
 8005e70:	bd30      	pop	{r4, r5, pc}
 8005e72:	bf00      	nop
 8005e74:	20000600 	.word	0x20000600

08005e78 <sbrk_aligned>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	4e0e      	ldr	r6, [pc, #56]	; (8005eb4 <sbrk_aligned+0x3c>)
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	4605      	mov	r5, r0
 8005e80:	6831      	ldr	r1, [r6, #0]
 8005e82:	b911      	cbnz	r1, 8005e8a <sbrk_aligned+0x12>
 8005e84:	f000 fcbc 	bl	8006800 <_sbrk_r>
 8005e88:	6030      	str	r0, [r6, #0]
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 fcb7 	bl	8006800 <_sbrk_r>
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	d00a      	beq.n	8005eac <sbrk_aligned+0x34>
 8005e96:	1cc4      	adds	r4, r0, #3
 8005e98:	f024 0403 	bic.w	r4, r4, #3
 8005e9c:	42a0      	cmp	r0, r4
 8005e9e:	d007      	beq.n	8005eb0 <sbrk_aligned+0x38>
 8005ea0:	1a21      	subs	r1, r4, r0
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fcac 	bl	8006800 <_sbrk_r>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d101      	bne.n	8005eb0 <sbrk_aligned+0x38>
 8005eac:	f04f 34ff 	mov.w	r4, #4294967295
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	20000604 	.word	0x20000604

08005eb8 <_malloc_r>:
 8005eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	1ccd      	adds	r5, r1, #3
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	f025 0503 	bic.w	r5, r5, #3
 8005ec4:	3508      	adds	r5, #8
 8005ec6:	2d0c      	cmp	r5, #12
 8005ec8:	bf38      	it	cc
 8005eca:	250c      	movcc	r5, #12
 8005ecc:	2d00      	cmp	r5, #0
 8005ece:	db01      	blt.n	8005ed4 <_malloc_r+0x1c>
 8005ed0:	42a9      	cmp	r1, r5
 8005ed2:	d905      	bls.n	8005ee0 <_malloc_r+0x28>
 8005ed4:	230c      	movs	r3, #12
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	4630      	mov	r0, r6
 8005edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fb4 <_malloc_r+0xfc>
 8005ee4:	f000 f868 	bl	8005fb8 <__malloc_lock>
 8005ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8005eec:	461c      	mov	r4, r3
 8005eee:	bb5c      	cbnz	r4, 8005f48 <_malloc_r+0x90>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f7ff ffc0 	bl	8005e78 <sbrk_aligned>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	4604      	mov	r4, r0
 8005efc:	d155      	bne.n	8005faa <_malloc_r+0xf2>
 8005efe:	f8d8 4000 	ldr.w	r4, [r8]
 8005f02:	4626      	mov	r6, r4
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	d145      	bne.n	8005f94 <_malloc_r+0xdc>
 8005f08:	2c00      	cmp	r4, #0
 8005f0a:	d048      	beq.n	8005f9e <_malloc_r+0xe6>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4638      	mov	r0, r7
 8005f12:	eb04 0903 	add.w	r9, r4, r3
 8005f16:	f000 fc73 	bl	8006800 <_sbrk_r>
 8005f1a:	4581      	cmp	r9, r0
 8005f1c:	d13f      	bne.n	8005f9e <_malloc_r+0xe6>
 8005f1e:	6821      	ldr	r1, [r4, #0]
 8005f20:	4638      	mov	r0, r7
 8005f22:	1a6d      	subs	r5, r5, r1
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7ff ffa7 	bl	8005e78 <sbrk_aligned>
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d037      	beq.n	8005f9e <_malloc_r+0xe6>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	442b      	add	r3, r5
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	f8d8 3000 	ldr.w	r3, [r8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d038      	beq.n	8005fae <_malloc_r+0xf6>
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	42a2      	cmp	r2, r4
 8005f40:	d12b      	bne.n	8005f9a <_malloc_r+0xe2>
 8005f42:	2200      	movs	r2, #0
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	e00f      	b.n	8005f68 <_malloc_r+0xb0>
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	1b52      	subs	r2, r2, r5
 8005f4c:	d41f      	bmi.n	8005f8e <_malloc_r+0xd6>
 8005f4e:	2a0b      	cmp	r2, #11
 8005f50:	d917      	bls.n	8005f82 <_malloc_r+0xca>
 8005f52:	1961      	adds	r1, r4, r5
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	6025      	str	r5, [r4, #0]
 8005f58:	bf18      	it	ne
 8005f5a:	6059      	strne	r1, [r3, #4]
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	bf08      	it	eq
 8005f60:	f8c8 1000 	streq.w	r1, [r8]
 8005f64:	5162      	str	r2, [r4, r5]
 8005f66:	604b      	str	r3, [r1, #4]
 8005f68:	f104 060b 	add.w	r6, r4, #11
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f000 f829 	bl	8005fc4 <__malloc_unlock>
 8005f72:	1d23      	adds	r3, r4, #4
 8005f74:	f026 0607 	bic.w	r6, r6, #7
 8005f78:	1af2      	subs	r2, r6, r3
 8005f7a:	d0ae      	beq.n	8005eda <_malloc_r+0x22>
 8005f7c:	1b9b      	subs	r3, r3, r6
 8005f7e:	50a3      	str	r3, [r4, r2]
 8005f80:	e7ab      	b.n	8005eda <_malloc_r+0x22>
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	6862      	ldr	r2, [r4, #4]
 8005f86:	d1dd      	bne.n	8005f44 <_malloc_r+0x8c>
 8005f88:	f8c8 2000 	str.w	r2, [r8]
 8005f8c:	e7ec      	b.n	8005f68 <_malloc_r+0xb0>
 8005f8e:	4623      	mov	r3, r4
 8005f90:	6864      	ldr	r4, [r4, #4]
 8005f92:	e7ac      	b.n	8005eee <_malloc_r+0x36>
 8005f94:	4634      	mov	r4, r6
 8005f96:	6876      	ldr	r6, [r6, #4]
 8005f98:	e7b4      	b.n	8005f04 <_malloc_r+0x4c>
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	e7cc      	b.n	8005f38 <_malloc_r+0x80>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	f000 f80e 	bl	8005fc4 <__malloc_unlock>
 8005fa8:	e797      	b.n	8005eda <_malloc_r+0x22>
 8005faa:	6025      	str	r5, [r4, #0]
 8005fac:	e7dc      	b.n	8005f68 <_malloc_r+0xb0>
 8005fae:	605b      	str	r3, [r3, #4]
 8005fb0:	deff      	udf	#255	; 0xff
 8005fb2:	bf00      	nop
 8005fb4:	20000600 	.word	0x20000600

08005fb8 <__malloc_lock>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__malloc_lock+0x8>)
 8005fba:	f7ff bf0f 	b.w	8005ddc <__retarget_lock_acquire_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	200005fc 	.word	0x200005fc

08005fc4 <__malloc_unlock>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	; (8005fcc <__malloc_unlock+0x8>)
 8005fc6:	f7ff bf0a 	b.w	8005dde <__retarget_lock_release_recursive>
 8005fca:	bf00      	nop
 8005fcc:	200005fc 	.word	0x200005fc

08005fd0 <__sfputc_r>:
 8005fd0:	6893      	ldr	r3, [r2, #8]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	6093      	str	r3, [r2, #8]
 8005fd8:	b410      	push	{r4}
 8005fda:	da08      	bge.n	8005fee <__sfputc_r+0x1e>
 8005fdc:	6994      	ldr	r4, [r2, #24]
 8005fde:	42a3      	cmp	r3, r4
 8005fe0:	db01      	blt.n	8005fe6 <__sfputc_r+0x16>
 8005fe2:	290a      	cmp	r1, #10
 8005fe4:	d103      	bne.n	8005fee <__sfputc_r+0x1e>
 8005fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fea:	f000 bb73 	b.w	80066d4 <__swbuf_r>
 8005fee:	6813      	ldr	r3, [r2, #0]
 8005ff0:	1c58      	adds	r0, r3, #1
 8005ff2:	6010      	str	r0, [r2, #0]
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	7019      	strb	r1, [r3, #0]
 8005ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <__sfputs_r>:
 8005ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006000:	4606      	mov	r6, r0
 8006002:	460f      	mov	r7, r1
 8006004:	4614      	mov	r4, r2
 8006006:	18d5      	adds	r5, r2, r3
 8006008:	42ac      	cmp	r4, r5
 800600a:	d101      	bne.n	8006010 <__sfputs_r+0x12>
 800600c:	2000      	movs	r0, #0
 800600e:	e007      	b.n	8006020 <__sfputs_r+0x22>
 8006010:	463a      	mov	r2, r7
 8006012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006016:	4630      	mov	r0, r6
 8006018:	f7ff ffda 	bl	8005fd0 <__sfputc_r>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d1f3      	bne.n	8006008 <__sfputs_r+0xa>
 8006020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006024 <_vfiprintf_r>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	460d      	mov	r5, r1
 800602a:	b09d      	sub	sp, #116	; 0x74
 800602c:	4614      	mov	r4, r2
 800602e:	4698      	mov	r8, r3
 8006030:	4606      	mov	r6, r0
 8006032:	b118      	cbz	r0, 800603c <_vfiprintf_r+0x18>
 8006034:	6a03      	ldr	r3, [r0, #32]
 8006036:	b90b      	cbnz	r3, 800603c <_vfiprintf_r+0x18>
 8006038:	f7ff fdcc 	bl	8005bd4 <__sinit>
 800603c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800603e:	07d9      	lsls	r1, r3, #31
 8006040:	d405      	bmi.n	800604e <_vfiprintf_r+0x2a>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	059a      	lsls	r2, r3, #22
 8006046:	d402      	bmi.n	800604e <_vfiprintf_r+0x2a>
 8006048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604a:	f7ff fec7 	bl	8005ddc <__retarget_lock_acquire_recursive>
 800604e:	89ab      	ldrh	r3, [r5, #12]
 8006050:	071b      	lsls	r3, r3, #28
 8006052:	d501      	bpl.n	8006058 <_vfiprintf_r+0x34>
 8006054:	692b      	ldr	r3, [r5, #16]
 8006056:	b99b      	cbnz	r3, 8006080 <_vfiprintf_r+0x5c>
 8006058:	4629      	mov	r1, r5
 800605a:	4630      	mov	r0, r6
 800605c:	f000 fb78 	bl	8006750 <__swsetup_r>
 8006060:	b170      	cbz	r0, 8006080 <_vfiprintf_r+0x5c>
 8006062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006064:	07dc      	lsls	r4, r3, #31
 8006066:	d504      	bpl.n	8006072 <_vfiprintf_r+0x4e>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	b01d      	add	sp, #116	; 0x74
 800606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	0598      	lsls	r0, r3, #22
 8006076:	d4f7      	bmi.n	8006068 <_vfiprintf_r+0x44>
 8006078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607a:	f7ff feb0 	bl	8005dde <__retarget_lock_release_recursive>
 800607e:	e7f3      	b.n	8006068 <_vfiprintf_r+0x44>
 8006080:	2300      	movs	r3, #0
 8006082:	f8cd 800c 	str.w	r8, [sp, #12]
 8006086:	f04f 0901 	mov.w	r9, #1
 800608a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8006244 <_vfiprintf_r+0x220>
 800608e:	9309      	str	r3, [sp, #36]	; 0x24
 8006090:	2320      	movs	r3, #32
 8006092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006096:	2330      	movs	r3, #48	; 0x30
 8006098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800609c:	4623      	mov	r3, r4
 800609e:	469a      	mov	sl, r3
 80060a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060a4:	b10a      	cbz	r2, 80060aa <_vfiprintf_r+0x86>
 80060a6:	2a25      	cmp	r2, #37	; 0x25
 80060a8:	d1f9      	bne.n	800609e <_vfiprintf_r+0x7a>
 80060aa:	ebba 0b04 	subs.w	fp, sl, r4
 80060ae:	d00b      	beq.n	80060c8 <_vfiprintf_r+0xa4>
 80060b0:	465b      	mov	r3, fp
 80060b2:	4622      	mov	r2, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff ffa1 	bl	8005ffe <__sfputs_r>
 80060bc:	3001      	adds	r0, #1
 80060be:	f000 80a9 	beq.w	8006214 <_vfiprintf_r+0x1f0>
 80060c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c4:	445a      	add	r2, fp
 80060c6:	9209      	str	r2, [sp, #36]	; 0x24
 80060c8:	f89a 3000 	ldrb.w	r3, [sl]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80a1 	beq.w	8006214 <_vfiprintf_r+0x1f0>
 80060d2:	2300      	movs	r3, #0
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	f10a 0a01 	add.w	sl, sl, #1
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	9307      	str	r3, [sp, #28]
 80060e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060e4:	931a      	str	r3, [sp, #104]	; 0x68
 80060e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ea:	4654      	mov	r4, sl
 80060ec:	2205      	movs	r2, #5
 80060ee:	4855      	ldr	r0, [pc, #340]	; (8006244 <_vfiprintf_r+0x220>)
 80060f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f4:	f000 fb94 	bl	8006820 <memchr>
 80060f8:	9a04      	ldr	r2, [sp, #16]
 80060fa:	b9d8      	cbnz	r0, 8006134 <_vfiprintf_r+0x110>
 80060fc:	06d1      	lsls	r1, r2, #27
 80060fe:	bf44      	itt	mi
 8006100:	2320      	movmi	r3, #32
 8006102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006106:	0713      	lsls	r3, r2, #28
 8006108:	bf44      	itt	mi
 800610a:	232b      	movmi	r3, #43	; 0x2b
 800610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006110:	f89a 3000 	ldrb.w	r3, [sl]
 8006114:	2b2a      	cmp	r3, #42	; 0x2a
 8006116:	d015      	beq.n	8006144 <_vfiprintf_r+0x120>
 8006118:	9a07      	ldr	r2, [sp, #28]
 800611a:	4654      	mov	r4, sl
 800611c:	2000      	movs	r0, #0
 800611e:	f04f 0c0a 	mov.w	ip, #10
 8006122:	4621      	mov	r1, r4
 8006124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006128:	3b30      	subs	r3, #48	; 0x30
 800612a:	2b09      	cmp	r3, #9
 800612c:	d94d      	bls.n	80061ca <_vfiprintf_r+0x1a6>
 800612e:	b1b0      	cbz	r0, 800615e <_vfiprintf_r+0x13a>
 8006130:	9207      	str	r2, [sp, #28]
 8006132:	e014      	b.n	800615e <_vfiprintf_r+0x13a>
 8006134:	eba0 0308 	sub.w	r3, r0, r8
 8006138:	46a2      	mov	sl, r4
 800613a:	fa09 f303 	lsl.w	r3, r9, r3
 800613e:	4313      	orrs	r3, r2
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	e7d2      	b.n	80060ea <_vfiprintf_r+0xc6>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	1d19      	adds	r1, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	9103      	str	r1, [sp, #12]
 800614e:	bfbb      	ittet	lt
 8006150:	425b      	neglt	r3, r3
 8006152:	f042 0202 	orrlt.w	r2, r2, #2
 8006156:	9307      	strge	r3, [sp, #28]
 8006158:	9307      	strlt	r3, [sp, #28]
 800615a:	bfb8      	it	lt
 800615c:	9204      	strlt	r2, [sp, #16]
 800615e:	7823      	ldrb	r3, [r4, #0]
 8006160:	2b2e      	cmp	r3, #46	; 0x2e
 8006162:	d10c      	bne.n	800617e <_vfiprintf_r+0x15a>
 8006164:	7863      	ldrb	r3, [r4, #1]
 8006166:	2b2a      	cmp	r3, #42	; 0x2a
 8006168:	d134      	bne.n	80061d4 <_vfiprintf_r+0x1b0>
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	3402      	adds	r4, #2
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	9203      	str	r2, [sp, #12]
 8006176:	bfb8      	it	lt
 8006178:	f04f 33ff 	movlt.w	r3, #4294967295
 800617c:	9305      	str	r3, [sp, #20]
 800617e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006254 <_vfiprintf_r+0x230>
 8006182:	2203      	movs	r2, #3
 8006184:	7821      	ldrb	r1, [r4, #0]
 8006186:	4650      	mov	r0, sl
 8006188:	f000 fb4a 	bl	8006820 <memchr>
 800618c:	b138      	cbz	r0, 800619e <_vfiprintf_r+0x17a>
 800618e:	eba0 000a 	sub.w	r0, r0, sl
 8006192:	2240      	movs	r2, #64	; 0x40
 8006194:	9b04      	ldr	r3, [sp, #16]
 8006196:	3401      	adds	r4, #1
 8006198:	4082      	lsls	r2, r0
 800619a:	4313      	orrs	r3, r2
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a2:	2206      	movs	r2, #6
 80061a4:	4828      	ldr	r0, [pc, #160]	; (8006248 <_vfiprintf_r+0x224>)
 80061a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061aa:	f000 fb39 	bl	8006820 <memchr>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d03f      	beq.n	8006232 <_vfiprintf_r+0x20e>
 80061b2:	4b26      	ldr	r3, [pc, #152]	; (800624c <_vfiprintf_r+0x228>)
 80061b4:	bb1b      	cbnz	r3, 80061fe <_vfiprintf_r+0x1da>
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	3307      	adds	r3, #7
 80061ba:	f023 0307 	bic.w	r3, r3, #7
 80061be:	3308      	adds	r3, #8
 80061c0:	9303      	str	r3, [sp, #12]
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	443b      	add	r3, r7
 80061c6:	9309      	str	r3, [sp, #36]	; 0x24
 80061c8:	e768      	b.n	800609c <_vfiprintf_r+0x78>
 80061ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80061ce:	460c      	mov	r4, r1
 80061d0:	2001      	movs	r0, #1
 80061d2:	e7a6      	b.n	8006122 <_vfiprintf_r+0xfe>
 80061d4:	2300      	movs	r3, #0
 80061d6:	3401      	adds	r4, #1
 80061d8:	f04f 0c0a 	mov.w	ip, #10
 80061dc:	4619      	mov	r1, r3
 80061de:	9305      	str	r3, [sp, #20]
 80061e0:	4620      	mov	r0, r4
 80061e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e6:	3a30      	subs	r2, #48	; 0x30
 80061e8:	2a09      	cmp	r2, #9
 80061ea:	d903      	bls.n	80061f4 <_vfiprintf_r+0x1d0>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0c6      	beq.n	800617e <_vfiprintf_r+0x15a>
 80061f0:	9105      	str	r1, [sp, #20]
 80061f2:	e7c4      	b.n	800617e <_vfiprintf_r+0x15a>
 80061f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061f8:	4604      	mov	r4, r0
 80061fa:	2301      	movs	r3, #1
 80061fc:	e7f0      	b.n	80061e0 <_vfiprintf_r+0x1bc>
 80061fe:	ab03      	add	r3, sp, #12
 8006200:	462a      	mov	r2, r5
 8006202:	a904      	add	r1, sp, #16
 8006204:	4630      	mov	r0, r6
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <_vfiprintf_r+0x22c>)
 800620a:	f3af 8000 	nop.w
 800620e:	4607      	mov	r7, r0
 8006210:	1c78      	adds	r0, r7, #1
 8006212:	d1d6      	bne.n	80061c2 <_vfiprintf_r+0x19e>
 8006214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006216:	07d9      	lsls	r1, r3, #31
 8006218:	d405      	bmi.n	8006226 <_vfiprintf_r+0x202>
 800621a:	89ab      	ldrh	r3, [r5, #12]
 800621c:	059a      	lsls	r2, r3, #22
 800621e:	d402      	bmi.n	8006226 <_vfiprintf_r+0x202>
 8006220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006222:	f7ff fddc 	bl	8005dde <__retarget_lock_release_recursive>
 8006226:	89ab      	ldrh	r3, [r5, #12]
 8006228:	065b      	lsls	r3, r3, #25
 800622a:	f53f af1d 	bmi.w	8006068 <_vfiprintf_r+0x44>
 800622e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006230:	e71c      	b.n	800606c <_vfiprintf_r+0x48>
 8006232:	ab03      	add	r3, sp, #12
 8006234:	462a      	mov	r2, r5
 8006236:	a904      	add	r1, sp, #16
 8006238:	4630      	mov	r0, r6
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <_vfiprintf_r+0x22c>)
 800623e:	f000 f87d 	bl	800633c <_printf_i>
 8006242:	e7e4      	b.n	800620e <_vfiprintf_r+0x1ea>
 8006244:	08006a5c 	.word	0x08006a5c
 8006248:	08006a66 	.word	0x08006a66
 800624c:	00000000 	.word	0x00000000
 8006250:	08005fff 	.word	0x08005fff
 8006254:	08006a62 	.word	0x08006a62

08006258 <_printf_common>:
 8006258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	4616      	mov	r6, r2
 800625e:	4699      	mov	r9, r3
 8006260:	688a      	ldr	r2, [r1, #8]
 8006262:	4607      	mov	r7, r0
 8006264:	690b      	ldr	r3, [r1, #16]
 8006266:	460c      	mov	r4, r1
 8006268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800626c:	4293      	cmp	r3, r2
 800626e:	bfb8      	it	lt
 8006270:	4613      	movlt	r3, r2
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006278:	b10a      	cbz	r2, 800627e <_printf_common+0x26>
 800627a:	3301      	adds	r3, #1
 800627c:	6033      	str	r3, [r6, #0]
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	0699      	lsls	r1, r3, #26
 8006282:	bf42      	ittt	mi
 8006284:	6833      	ldrmi	r3, [r6, #0]
 8006286:	3302      	addmi	r3, #2
 8006288:	6033      	strmi	r3, [r6, #0]
 800628a:	6825      	ldr	r5, [r4, #0]
 800628c:	f015 0506 	ands.w	r5, r5, #6
 8006290:	d106      	bne.n	80062a0 <_printf_common+0x48>
 8006292:	f104 0a19 	add.w	sl, r4, #25
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	6832      	ldr	r2, [r6, #0]
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	42ab      	cmp	r3, r5
 800629e:	dc2b      	bgt.n	80062f8 <_printf_common+0xa0>
 80062a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062a4:	1e13      	subs	r3, r2, #0
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	bf18      	it	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	0692      	lsls	r2, r2, #26
 80062ae:	d430      	bmi.n	8006312 <_printf_common+0xba>
 80062b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b4:	4649      	mov	r1, r9
 80062b6:	4638      	mov	r0, r7
 80062b8:	47c0      	blx	r8
 80062ba:	3001      	adds	r0, #1
 80062bc:	d023      	beq.n	8006306 <_printf_common+0xae>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	341a      	adds	r4, #26
 80062c2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80062c6:	f003 0306 	and.w	r3, r3, #6
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	bf0a      	itet	eq
 80062ce:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80062d2:	2500      	movne	r5, #0
 80062d4:	6833      	ldreq	r3, [r6, #0]
 80062d6:	f04f 0600 	mov.w	r6, #0
 80062da:	bf08      	it	eq
 80062dc:	1aed      	subeq	r5, r5, r3
 80062de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062e2:	bf08      	it	eq
 80062e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bfc4      	itt	gt
 80062ec:	1a9b      	subgt	r3, r3, r2
 80062ee:	18ed      	addgt	r5, r5, r3
 80062f0:	42b5      	cmp	r5, r6
 80062f2:	d11a      	bne.n	800632a <_printf_common+0xd2>
 80062f4:	2000      	movs	r0, #0
 80062f6:	e008      	b.n	800630a <_printf_common+0xb2>
 80062f8:	2301      	movs	r3, #1
 80062fa:	4652      	mov	r2, sl
 80062fc:	4649      	mov	r1, r9
 80062fe:	4638      	mov	r0, r7
 8006300:	47c0      	blx	r8
 8006302:	3001      	adds	r0, #1
 8006304:	d103      	bne.n	800630e <_printf_common+0xb6>
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630e:	3501      	adds	r5, #1
 8006310:	e7c1      	b.n	8006296 <_printf_common+0x3e>
 8006312:	18e1      	adds	r1, r4, r3
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	2030      	movs	r0, #48	; 0x30
 8006318:	3302      	adds	r3, #2
 800631a:	4422      	add	r2, r4
 800631c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006328:	e7c2      	b.n	80062b0 <_printf_common+0x58>
 800632a:	2301      	movs	r3, #1
 800632c:	4622      	mov	r2, r4
 800632e:	4649      	mov	r1, r9
 8006330:	4638      	mov	r0, r7
 8006332:	47c0      	blx	r8
 8006334:	3001      	adds	r0, #1
 8006336:	d0e6      	beq.n	8006306 <_printf_common+0xae>
 8006338:	3601      	adds	r6, #1
 800633a:	e7d9      	b.n	80062f0 <_printf_common+0x98>

0800633c <_printf_i>:
 800633c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006340:	7e0f      	ldrb	r7, [r1, #24]
 8006342:	4691      	mov	r9, r2
 8006344:	4680      	mov	r8, r0
 8006346:	460c      	mov	r4, r1
 8006348:	2f78      	cmp	r7, #120	; 0x78
 800634a:	469a      	mov	sl, r3
 800634c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800634e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006352:	d807      	bhi.n	8006364 <_printf_i+0x28>
 8006354:	2f62      	cmp	r7, #98	; 0x62
 8006356:	d80a      	bhi.n	800636e <_printf_i+0x32>
 8006358:	2f00      	cmp	r7, #0
 800635a:	f000 80d3 	beq.w	8006504 <_printf_i+0x1c8>
 800635e:	2f58      	cmp	r7, #88	; 0x58
 8006360:	f000 80bf 	beq.w	80064e2 <_printf_i+0x1a6>
 8006364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800636c:	e03a      	b.n	80063e4 <_printf_i+0xa8>
 800636e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006372:	2b15      	cmp	r3, #21
 8006374:	d8f6      	bhi.n	8006364 <_printf_i+0x28>
 8006376:	a101      	add	r1, pc, #4	; (adr r1, 800637c <_printf_i+0x40>)
 8006378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063e9 	.word	0x080063e9
 8006384:	08006365 	.word	0x08006365
 8006388:	08006365 	.word	0x08006365
 800638c:	08006365 	.word	0x08006365
 8006390:	08006365 	.word	0x08006365
 8006394:	080063e9 	.word	0x080063e9
 8006398:	08006365 	.word	0x08006365
 800639c:	08006365 	.word	0x08006365
 80063a0:	08006365 	.word	0x08006365
 80063a4:	08006365 	.word	0x08006365
 80063a8:	080064eb 	.word	0x080064eb
 80063ac:	08006415 	.word	0x08006415
 80063b0:	080064a7 	.word	0x080064a7
 80063b4:	08006365 	.word	0x08006365
 80063b8:	08006365 	.word	0x08006365
 80063bc:	0800650d 	.word	0x0800650d
 80063c0:	08006365 	.word	0x08006365
 80063c4:	08006415 	.word	0x08006415
 80063c8:	08006365 	.word	0x08006365
 80063cc:	08006365 	.word	0x08006365
 80063d0:	080064af 	.word	0x080064af
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	602a      	str	r2, [r5, #0]
 80063dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063e4:	2301      	movs	r3, #1
 80063e6:	e09e      	b.n	8006526 <_printf_i+0x1ea>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	0607      	lsls	r7, r0, #24
 80063ee:	f103 0104 	add.w	r1, r3, #4
 80063f2:	6029      	str	r1, [r5, #0]
 80063f4:	d501      	bpl.n	80063fa <_printf_i+0xbe>
 80063f6:	681e      	ldr	r6, [r3, #0]
 80063f8:	e003      	b.n	8006402 <_printf_i+0xc6>
 80063fa:	0646      	lsls	r6, r0, #25
 80063fc:	d5fb      	bpl.n	80063f6 <_printf_i+0xba>
 80063fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006402:	2e00      	cmp	r6, #0
 8006404:	da03      	bge.n	800640e <_printf_i+0xd2>
 8006406:	232d      	movs	r3, #45	; 0x2d
 8006408:	4276      	negs	r6, r6
 800640a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640e:	4859      	ldr	r0, [pc, #356]	; (8006574 <_printf_i+0x238>)
 8006410:	230a      	movs	r3, #10
 8006412:	e012      	b.n	800643a <_printf_i+0xfe>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	6820      	ldr	r0, [r4, #0]
 8006418:	1d19      	adds	r1, r3, #4
 800641a:	6029      	str	r1, [r5, #0]
 800641c:	0605      	lsls	r5, r0, #24
 800641e:	d501      	bpl.n	8006424 <_printf_i+0xe8>
 8006420:	681e      	ldr	r6, [r3, #0]
 8006422:	e002      	b.n	800642a <_printf_i+0xee>
 8006424:	0641      	lsls	r1, r0, #25
 8006426:	d5fb      	bpl.n	8006420 <_printf_i+0xe4>
 8006428:	881e      	ldrh	r6, [r3, #0]
 800642a:	2f6f      	cmp	r7, #111	; 0x6f
 800642c:	4851      	ldr	r0, [pc, #324]	; (8006574 <_printf_i+0x238>)
 800642e:	bf0c      	ite	eq
 8006430:	2308      	moveq	r3, #8
 8006432:	230a      	movne	r3, #10
 8006434:	2100      	movs	r1, #0
 8006436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800643a:	6865      	ldr	r5, [r4, #4]
 800643c:	2d00      	cmp	r5, #0
 800643e:	60a5      	str	r5, [r4, #8]
 8006440:	bfa2      	ittt	ge
 8006442:	6821      	ldrge	r1, [r4, #0]
 8006444:	f021 0104 	bicge.w	r1, r1, #4
 8006448:	6021      	strge	r1, [r4, #0]
 800644a:	b90e      	cbnz	r6, 8006450 <_printf_i+0x114>
 800644c:	2d00      	cmp	r5, #0
 800644e:	d04a      	beq.n	80064e6 <_printf_i+0x1aa>
 8006450:	4615      	mov	r5, r2
 8006452:	fbb6 f1f3 	udiv	r1, r6, r3
 8006456:	fb03 6711 	mls	r7, r3, r1, r6
 800645a:	5dc7      	ldrb	r7, [r0, r7]
 800645c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006460:	4637      	mov	r7, r6
 8006462:	460e      	mov	r6, r1
 8006464:	42bb      	cmp	r3, r7
 8006466:	d9f4      	bls.n	8006452 <_printf_i+0x116>
 8006468:	2b08      	cmp	r3, #8
 800646a:	d10b      	bne.n	8006484 <_printf_i+0x148>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	07de      	lsls	r6, r3, #31
 8006470:	d508      	bpl.n	8006484 <_printf_i+0x148>
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	6861      	ldr	r1, [r4, #4]
 8006476:	4299      	cmp	r1, r3
 8006478:	bfde      	ittt	le
 800647a:	2330      	movle	r3, #48	; 0x30
 800647c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006480:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006484:	1b52      	subs	r2, r2, r5
 8006486:	6122      	str	r2, [r4, #16]
 8006488:	464b      	mov	r3, r9
 800648a:	aa03      	add	r2, sp, #12
 800648c:	4621      	mov	r1, r4
 800648e:	4640      	mov	r0, r8
 8006490:	f8cd a000 	str.w	sl, [sp]
 8006494:	f7ff fee0 	bl	8006258 <_printf_common>
 8006498:	3001      	adds	r0, #1
 800649a:	d149      	bne.n	8006530 <_printf_i+0x1f4>
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	b004      	add	sp, #16
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	f043 0320 	orr.w	r3, r3, #32
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	2778      	movs	r7, #120	; 0x78
 80064b0:	4831      	ldr	r0, [pc, #196]	; (8006578 <_printf_i+0x23c>)
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064b8:	061f      	lsls	r7, r3, #24
 80064ba:	6829      	ldr	r1, [r5, #0]
 80064bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80064c0:	d402      	bmi.n	80064c8 <_printf_i+0x18c>
 80064c2:	065f      	lsls	r7, r3, #25
 80064c4:	bf48      	it	mi
 80064c6:	b2b6      	uxthmi	r6, r6
 80064c8:	07df      	lsls	r7, r3, #31
 80064ca:	6029      	str	r1, [r5, #0]
 80064cc:	bf44      	itt	mi
 80064ce:	f043 0320 	orrmi.w	r3, r3, #32
 80064d2:	6023      	strmi	r3, [r4, #0]
 80064d4:	b91e      	cbnz	r6, 80064de <_printf_i+0x1a2>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f023 0320 	bic.w	r3, r3, #32
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	2310      	movs	r3, #16
 80064e0:	e7a8      	b.n	8006434 <_printf_i+0xf8>
 80064e2:	4824      	ldr	r0, [pc, #144]	; (8006574 <_printf_i+0x238>)
 80064e4:	e7e5      	b.n	80064b2 <_printf_i+0x176>
 80064e6:	4615      	mov	r5, r2
 80064e8:	e7be      	b.n	8006468 <_printf_i+0x12c>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	6826      	ldr	r6, [r4, #0]
 80064ee:	1d18      	adds	r0, r3, #4
 80064f0:	6961      	ldr	r1, [r4, #20]
 80064f2:	6028      	str	r0, [r5, #0]
 80064f4:	0635      	lsls	r5, r6, #24
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	d501      	bpl.n	80064fe <_printf_i+0x1c2>
 80064fa:	6019      	str	r1, [r3, #0]
 80064fc:	e002      	b.n	8006504 <_printf_i+0x1c8>
 80064fe:	0670      	lsls	r0, r6, #25
 8006500:	d5fb      	bpl.n	80064fa <_printf_i+0x1be>
 8006502:	8019      	strh	r1, [r3, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	4615      	mov	r5, r2
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	e7bd      	b.n	8006488 <_printf_i+0x14c>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	2100      	movs	r1, #0
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	602a      	str	r2, [r5, #0]
 8006514:	681d      	ldr	r5, [r3, #0]
 8006516:	6862      	ldr	r2, [r4, #4]
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f981 	bl	8006820 <memchr>
 800651e:	b108      	cbz	r0, 8006524 <_printf_i+0x1e8>
 8006520:	1b40      	subs	r0, r0, r5
 8006522:	6060      	str	r0, [r4, #4]
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	6123      	str	r3, [r4, #16]
 8006528:	2300      	movs	r3, #0
 800652a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652e:	e7ab      	b.n	8006488 <_printf_i+0x14c>
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	462a      	mov	r2, r5
 8006534:	4649      	mov	r1, r9
 8006536:	4640      	mov	r0, r8
 8006538:	47d0      	blx	sl
 800653a:	3001      	adds	r0, #1
 800653c:	d0ae      	beq.n	800649c <_printf_i+0x160>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	079b      	lsls	r3, r3, #30
 8006542:	d413      	bmi.n	800656c <_printf_i+0x230>
 8006544:	68e0      	ldr	r0, [r4, #12]
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	4298      	cmp	r0, r3
 800654a:	bfb8      	it	lt
 800654c:	4618      	movlt	r0, r3
 800654e:	e7a7      	b.n	80064a0 <_printf_i+0x164>
 8006550:	2301      	movs	r3, #1
 8006552:	4632      	mov	r2, r6
 8006554:	4649      	mov	r1, r9
 8006556:	4640      	mov	r0, r8
 8006558:	47d0      	blx	sl
 800655a:	3001      	adds	r0, #1
 800655c:	d09e      	beq.n	800649c <_printf_i+0x160>
 800655e:	3501      	adds	r5, #1
 8006560:	68e3      	ldr	r3, [r4, #12]
 8006562:	9903      	ldr	r1, [sp, #12]
 8006564:	1a5b      	subs	r3, r3, r1
 8006566:	42ab      	cmp	r3, r5
 8006568:	dcf2      	bgt.n	8006550 <_printf_i+0x214>
 800656a:	e7eb      	b.n	8006544 <_printf_i+0x208>
 800656c:	2500      	movs	r5, #0
 800656e:	f104 0619 	add.w	r6, r4, #25
 8006572:	e7f5      	b.n	8006560 <_printf_i+0x224>
 8006574:	08006a6d 	.word	0x08006a6d
 8006578:	08006a7e 	.word	0x08006a7e

0800657c <__sflush_r>:
 800657c:	898a      	ldrh	r2, [r1, #12]
 800657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006582:	4605      	mov	r5, r0
 8006584:	0710      	lsls	r0, r2, #28
 8006586:	460c      	mov	r4, r1
 8006588:	d458      	bmi.n	800663c <__sflush_r+0xc0>
 800658a:	684b      	ldr	r3, [r1, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	dc05      	bgt.n	800659c <__sflush_r+0x20>
 8006590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	dc02      	bgt.n	800659c <__sflush_r+0x20>
 8006596:	2000      	movs	r0, #0
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800659c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800659e:	2e00      	cmp	r6, #0
 80065a0:	d0f9      	beq.n	8006596 <__sflush_r+0x1a>
 80065a2:	2300      	movs	r3, #0
 80065a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065a8:	682f      	ldr	r7, [r5, #0]
 80065aa:	6a21      	ldr	r1, [r4, #32]
 80065ac:	602b      	str	r3, [r5, #0]
 80065ae:	d032      	beq.n	8006616 <__sflush_r+0x9a>
 80065b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	075a      	lsls	r2, r3, #29
 80065b6:	d505      	bpl.n	80065c4 <__sflush_r+0x48>
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	1ac0      	subs	r0, r0, r3
 80065bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065be:	b10b      	cbz	r3, 80065c4 <__sflush_r+0x48>
 80065c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065c2:	1ac0      	subs	r0, r0, r3
 80065c4:	2300      	movs	r3, #0
 80065c6:	4602      	mov	r2, r0
 80065c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065ca:	4628      	mov	r0, r5
 80065cc:	6a21      	ldr	r1, [r4, #32]
 80065ce:	47b0      	blx	r6
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	d106      	bne.n	80065e4 <__sflush_r+0x68>
 80065d6:	6829      	ldr	r1, [r5, #0]
 80065d8:	291d      	cmp	r1, #29
 80065da:	d82b      	bhi.n	8006634 <__sflush_r+0xb8>
 80065dc:	4a28      	ldr	r2, [pc, #160]	; (8006680 <__sflush_r+0x104>)
 80065de:	410a      	asrs	r2, r1
 80065e0:	07d6      	lsls	r6, r2, #31
 80065e2:	d427      	bmi.n	8006634 <__sflush_r+0xb8>
 80065e4:	2200      	movs	r2, #0
 80065e6:	04d9      	lsls	r1, r3, #19
 80065e8:	6062      	str	r2, [r4, #4]
 80065ea:	6922      	ldr	r2, [r4, #16]
 80065ec:	6022      	str	r2, [r4, #0]
 80065ee:	d504      	bpl.n	80065fa <__sflush_r+0x7e>
 80065f0:	1c42      	adds	r2, r0, #1
 80065f2:	d101      	bne.n	80065f8 <__sflush_r+0x7c>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	b903      	cbnz	r3, 80065fa <__sflush_r+0x7e>
 80065f8:	6560      	str	r0, [r4, #84]	; 0x54
 80065fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065fc:	602f      	str	r7, [r5, #0]
 80065fe:	2900      	cmp	r1, #0
 8006600:	d0c9      	beq.n	8006596 <__sflush_r+0x1a>
 8006602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006606:	4299      	cmp	r1, r3
 8006608:	d002      	beq.n	8006610 <__sflush_r+0x94>
 800660a:	4628      	mov	r0, r5
 800660c:	f7ff fbe8 	bl	8005de0 <_free_r>
 8006610:	2000      	movs	r0, #0
 8006612:	6360      	str	r0, [r4, #52]	; 0x34
 8006614:	e7c0      	b.n	8006598 <__sflush_r+0x1c>
 8006616:	2301      	movs	r3, #1
 8006618:	4628      	mov	r0, r5
 800661a:	47b0      	blx	r6
 800661c:	1c41      	adds	r1, r0, #1
 800661e:	d1c8      	bne.n	80065b2 <__sflush_r+0x36>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0c5      	beq.n	80065b2 <__sflush_r+0x36>
 8006626:	2b1d      	cmp	r3, #29
 8006628:	d001      	beq.n	800662e <__sflush_r+0xb2>
 800662a:	2b16      	cmp	r3, #22
 800662c:	d101      	bne.n	8006632 <__sflush_r+0xb6>
 800662e:	602f      	str	r7, [r5, #0]
 8006630:	e7b1      	b.n	8006596 <__sflush_r+0x1a>
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	e7ad      	b.n	8006598 <__sflush_r+0x1c>
 800663c:	690f      	ldr	r7, [r1, #16]
 800663e:	2f00      	cmp	r7, #0
 8006640:	d0a9      	beq.n	8006596 <__sflush_r+0x1a>
 8006642:	0793      	lsls	r3, r2, #30
 8006644:	680e      	ldr	r6, [r1, #0]
 8006646:	600f      	str	r7, [r1, #0]
 8006648:	bf0c      	ite	eq
 800664a:	694b      	ldreq	r3, [r1, #20]
 800664c:	2300      	movne	r3, #0
 800664e:	eba6 0807 	sub.w	r8, r6, r7
 8006652:	608b      	str	r3, [r1, #8]
 8006654:	f1b8 0f00 	cmp.w	r8, #0
 8006658:	dd9d      	ble.n	8006596 <__sflush_r+0x1a>
 800665a:	4643      	mov	r3, r8
 800665c:	463a      	mov	r2, r7
 800665e:	6a21      	ldr	r1, [r4, #32]
 8006660:	4628      	mov	r0, r5
 8006662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006664:	47b0      	blx	r6
 8006666:	2800      	cmp	r0, #0
 8006668:	dc06      	bgt.n	8006678 <__sflush_r+0xfc>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006674:	81a3      	strh	r3, [r4, #12]
 8006676:	e78f      	b.n	8006598 <__sflush_r+0x1c>
 8006678:	4407      	add	r7, r0
 800667a:	eba8 0800 	sub.w	r8, r8, r0
 800667e:	e7e9      	b.n	8006654 <__sflush_r+0xd8>
 8006680:	dfbffffe 	.word	0xdfbffffe

08006684 <_fflush_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	690b      	ldr	r3, [r1, #16]
 8006688:	4605      	mov	r5, r0
 800668a:	460c      	mov	r4, r1
 800668c:	b913      	cbnz	r3, 8006694 <_fflush_r+0x10>
 800668e:	2500      	movs	r5, #0
 8006690:	4628      	mov	r0, r5
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	b118      	cbz	r0, 800669e <_fflush_r+0x1a>
 8006696:	6a03      	ldr	r3, [r0, #32]
 8006698:	b90b      	cbnz	r3, 800669e <_fflush_r+0x1a>
 800669a:	f7ff fa9b 	bl	8005bd4 <__sinit>
 800669e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0f3      	beq.n	800668e <_fflush_r+0xa>
 80066a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066a8:	07d0      	lsls	r0, r2, #31
 80066aa:	d404      	bmi.n	80066b6 <_fflush_r+0x32>
 80066ac:	0599      	lsls	r1, r3, #22
 80066ae:	d402      	bmi.n	80066b6 <_fflush_r+0x32>
 80066b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066b2:	f7ff fb93 	bl	8005ddc <__retarget_lock_acquire_recursive>
 80066b6:	4628      	mov	r0, r5
 80066b8:	4621      	mov	r1, r4
 80066ba:	f7ff ff5f 	bl	800657c <__sflush_r>
 80066be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066c0:	4605      	mov	r5, r0
 80066c2:	07da      	lsls	r2, r3, #31
 80066c4:	d4e4      	bmi.n	8006690 <_fflush_r+0xc>
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	059b      	lsls	r3, r3, #22
 80066ca:	d4e1      	bmi.n	8006690 <_fflush_r+0xc>
 80066cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ce:	f7ff fb86 	bl	8005dde <__retarget_lock_release_recursive>
 80066d2:	e7dd      	b.n	8006690 <_fflush_r+0xc>

080066d4 <__swbuf_r>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	460e      	mov	r6, r1
 80066d8:	4614      	mov	r4, r2
 80066da:	4605      	mov	r5, r0
 80066dc:	b118      	cbz	r0, 80066e6 <__swbuf_r+0x12>
 80066de:	6a03      	ldr	r3, [r0, #32]
 80066e0:	b90b      	cbnz	r3, 80066e6 <__swbuf_r+0x12>
 80066e2:	f7ff fa77 	bl	8005bd4 <__sinit>
 80066e6:	69a3      	ldr	r3, [r4, #24]
 80066e8:	60a3      	str	r3, [r4, #8]
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	071a      	lsls	r2, r3, #28
 80066ee:	d525      	bpl.n	800673c <__swbuf_r+0x68>
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	b31b      	cbz	r3, 800673c <__swbuf_r+0x68>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	b2f6      	uxtb	r6, r6
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	4637      	mov	r7, r6
 80066fc:	1a98      	subs	r0, r3, r2
 80066fe:	6963      	ldr	r3, [r4, #20]
 8006700:	4283      	cmp	r3, r0
 8006702:	dc04      	bgt.n	800670e <__swbuf_r+0x3a>
 8006704:	4621      	mov	r1, r4
 8006706:	4628      	mov	r0, r5
 8006708:	f7ff ffbc 	bl	8006684 <_fflush_r>
 800670c:	b9e0      	cbnz	r0, 8006748 <__swbuf_r+0x74>
 800670e:	68a3      	ldr	r3, [r4, #8]
 8006710:	3b01      	subs	r3, #1
 8006712:	60a3      	str	r3, [r4, #8]
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	701e      	strb	r6, [r3, #0]
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	6962      	ldr	r2, [r4, #20]
 8006720:	429a      	cmp	r2, r3
 8006722:	d004      	beq.n	800672e <__swbuf_r+0x5a>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	07db      	lsls	r3, r3, #31
 8006728:	d506      	bpl.n	8006738 <__swbuf_r+0x64>
 800672a:	2e0a      	cmp	r6, #10
 800672c:	d104      	bne.n	8006738 <__swbuf_r+0x64>
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f7ff ffa7 	bl	8006684 <_fflush_r>
 8006736:	b938      	cbnz	r0, 8006748 <__swbuf_r+0x74>
 8006738:	4638      	mov	r0, r7
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f806 	bl	8006750 <__swsetup_r>
 8006744:	2800      	cmp	r0, #0
 8006746:	d0d5      	beq.n	80066f4 <__swbuf_r+0x20>
 8006748:	f04f 37ff 	mov.w	r7, #4294967295
 800674c:	e7f4      	b.n	8006738 <__swbuf_r+0x64>
	...

08006750 <__swsetup_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <__swsetup_r+0xac>)
 8006754:	4605      	mov	r5, r0
 8006756:	460c      	mov	r4, r1
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	b118      	cbz	r0, 8006764 <__swsetup_r+0x14>
 800675c:	6a03      	ldr	r3, [r0, #32]
 800675e:	b90b      	cbnz	r3, 8006764 <__swsetup_r+0x14>
 8006760:	f7ff fa38 	bl	8005bd4 <__sinit>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800676a:	0718      	lsls	r0, r3, #28
 800676c:	d422      	bmi.n	80067b4 <__swsetup_r+0x64>
 800676e:	06d9      	lsls	r1, r3, #27
 8006770:	d407      	bmi.n	8006782 <__swsetup_r+0x32>
 8006772:	2309      	movs	r3, #9
 8006774:	602b      	str	r3, [r5, #0]
 8006776:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	e034      	b.n	80067ec <__swsetup_r+0x9c>
 8006782:	0758      	lsls	r0, r3, #29
 8006784:	d512      	bpl.n	80067ac <__swsetup_r+0x5c>
 8006786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006788:	b141      	cbz	r1, 800679c <__swsetup_r+0x4c>
 800678a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800678e:	4299      	cmp	r1, r3
 8006790:	d002      	beq.n	8006798 <__swsetup_r+0x48>
 8006792:	4628      	mov	r0, r5
 8006794:	f7ff fb24 	bl	8005de0 <_free_r>
 8006798:	2300      	movs	r3, #0
 800679a:	6363      	str	r3, [r4, #52]	; 0x34
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	2300      	movs	r3, #0
 80067a6:	6063      	str	r3, [r4, #4]
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f043 0308 	orr.w	r3, r3, #8
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	b94b      	cbnz	r3, 80067cc <__swsetup_r+0x7c>
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c2:	d003      	beq.n	80067cc <__swsetup_r+0x7c>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 f85d 	bl	8006886 <__smakebuf_r>
 80067cc:	89a0      	ldrh	r0, [r4, #12]
 80067ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067d2:	f010 0301 	ands.w	r3, r0, #1
 80067d6:	d00a      	beq.n	80067ee <__swsetup_r+0x9e>
 80067d8:	2300      	movs	r3, #0
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	6963      	ldr	r3, [r4, #20]
 80067de:	425b      	negs	r3, r3
 80067e0:	61a3      	str	r3, [r4, #24]
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	b943      	cbnz	r3, 80067f8 <__swsetup_r+0xa8>
 80067e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067ea:	d1c4      	bne.n	8006776 <__swsetup_r+0x26>
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	0781      	lsls	r1, r0, #30
 80067f0:	bf58      	it	pl
 80067f2:	6963      	ldrpl	r3, [r4, #20]
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	e7f4      	b.n	80067e2 <__swsetup_r+0x92>
 80067f8:	2000      	movs	r0, #0
 80067fa:	e7f7      	b.n	80067ec <__swsetup_r+0x9c>
 80067fc:	20000078 	.word	0x20000078

08006800 <_sbrk_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	2300      	movs	r3, #0
 8006804:	4d05      	ldr	r5, [pc, #20]	; (800681c <_sbrk_r+0x1c>)
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fa fce8 	bl	80011e0 <_sbrk>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_sbrk_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_sbrk_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	200005f8 	.word	0x200005f8

08006820 <memchr>:
 8006820:	b2c9      	uxtb	r1, r1
 8006822:	4402      	add	r2, r0
 8006824:	b510      	push	{r4, lr}
 8006826:	4290      	cmp	r0, r2
 8006828:	4603      	mov	r3, r0
 800682a:	d101      	bne.n	8006830 <memchr+0x10>
 800682c:	2300      	movs	r3, #0
 800682e:	e003      	b.n	8006838 <memchr+0x18>
 8006830:	781c      	ldrb	r4, [r3, #0]
 8006832:	3001      	adds	r0, #1
 8006834:	428c      	cmp	r4, r1
 8006836:	d1f6      	bne.n	8006826 <memchr+0x6>
 8006838:	4618      	mov	r0, r3
 800683a:	bd10      	pop	{r4, pc}

0800683c <__swhatbuf_r>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	460c      	mov	r4, r1
 8006840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006844:	b096      	sub	sp, #88	; 0x58
 8006846:	4615      	mov	r5, r2
 8006848:	2900      	cmp	r1, #0
 800684a:	461e      	mov	r6, r3
 800684c:	da0c      	bge.n	8006868 <__swhatbuf_r+0x2c>
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	2100      	movs	r1, #0
 8006852:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006856:	bf0c      	ite	eq
 8006858:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800685c:	2340      	movne	r3, #64	; 0x40
 800685e:	2000      	movs	r0, #0
 8006860:	6031      	str	r1, [r6, #0]
 8006862:	602b      	str	r3, [r5, #0]
 8006864:	b016      	add	sp, #88	; 0x58
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	466a      	mov	r2, sp
 800686a:	f000 f849 	bl	8006900 <_fstat_r>
 800686e:	2800      	cmp	r0, #0
 8006870:	dbed      	blt.n	800684e <__swhatbuf_r+0x12>
 8006872:	9901      	ldr	r1, [sp, #4]
 8006874:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006878:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800687c:	4259      	negs	r1, r3
 800687e:	4159      	adcs	r1, r3
 8006880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006884:	e7eb      	b.n	800685e <__swhatbuf_r+0x22>

08006886 <__smakebuf_r>:
 8006886:	898b      	ldrh	r3, [r1, #12]
 8006888:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800688a:	079d      	lsls	r5, r3, #30
 800688c:	4606      	mov	r6, r0
 800688e:	460c      	mov	r4, r1
 8006890:	d507      	bpl.n	80068a2 <__smakebuf_r+0x1c>
 8006892:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	2301      	movs	r3, #1
 800689c:	6163      	str	r3, [r4, #20]
 800689e:	b002      	add	sp, #8
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
 80068a2:	ab01      	add	r3, sp, #4
 80068a4:	466a      	mov	r2, sp
 80068a6:	f7ff ffc9 	bl	800683c <__swhatbuf_r>
 80068aa:	9900      	ldr	r1, [sp, #0]
 80068ac:	4605      	mov	r5, r0
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff fb02 	bl	8005eb8 <_malloc_r>
 80068b4:	b948      	cbnz	r0, 80068ca <__smakebuf_r+0x44>
 80068b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ba:	059a      	lsls	r2, r3, #22
 80068bc:	d4ef      	bmi.n	800689e <__smakebuf_r+0x18>
 80068be:	f023 0303 	bic.w	r3, r3, #3
 80068c2:	f043 0302 	orr.w	r3, r3, #2
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	e7e3      	b.n	8006892 <__smakebuf_r+0xc>
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	6020      	str	r0, [r4, #0]
 80068ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d2:	6120      	str	r0, [r4, #16]
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	6163      	str	r3, [r4, #20]
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	b15b      	cbz	r3, 80068f6 <__smakebuf_r+0x70>
 80068de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e2:	4630      	mov	r0, r6
 80068e4:	f000 f81e 	bl	8006924 <_isatty_r>
 80068e8:	b128      	cbz	r0, 80068f6 <__smakebuf_r+0x70>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f023 0303 	bic.w	r3, r3, #3
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	431d      	orrs	r5, r3
 80068fa:	81a5      	strh	r5, [r4, #12]
 80068fc:	e7cf      	b.n	800689e <__smakebuf_r+0x18>
	...

08006900 <_fstat_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	2300      	movs	r3, #0
 8006904:	4d06      	ldr	r5, [pc, #24]	; (8006920 <_fstat_r+0x20>)
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f7fa fc3f 	bl	8001190 <_fstat>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d102      	bne.n	800691c <_fstat_r+0x1c>
 8006916:	682b      	ldr	r3, [r5, #0]
 8006918:	b103      	cbz	r3, 800691c <_fstat_r+0x1c>
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	200005f8 	.word	0x200005f8

08006924 <_isatty_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	2300      	movs	r3, #0
 8006928:	4d05      	ldr	r5, [pc, #20]	; (8006940 <_isatty_r+0x1c>)
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fa fc3e 	bl	80011b0 <_isatty>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_isatty_r+0x1a>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_isatty_r+0x1a>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	200005f8 	.word	0x200005f8

08006944 <_init>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr

08006950 <_fini>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr
